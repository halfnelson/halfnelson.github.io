{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/preact/dist/preact.mjs","webpack:///./node_modules/unistore/preact.js","webpack:///webpack://WordBoard/webpack/universalModuleDefinition","webpack:///webpack://WordBoard/webpack/bootstrap","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Int32.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Util.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Long.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/String.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Types.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Option.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Seq.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Map.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Set.js","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/Array.js","webpack:///webpack://WordBoard/src/board.fs","webpack:///webpack://WordBoard/.fable/fable-core.2.0.0/List.js","webpack:///webpack://WordBoard/src/wordset.fs","webpack:///webpack://WordBoard/src/boardbuilder.fs","webpack:///webpack://WordBoard/src/wordboard.fs","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./src/lib/vowelboard.ts","webpack:///./node_modules/unistore/dist/unistore.es.js","webpack:///./src/components/lettergrid.tsx","webpack:///./src/components/clue.tsx","webpack:///./src/components/progress.tsx","webpack:///./src/index.tsx","webpack:///./src/lib/storehelper.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","h","cloneElement","Component","render","rerender","options","VNode","stack","EMPTY_CHILDREN","nodeName","attributes","lastSimple","child","simple","children","arguments","length","push","pop","undefined","String","vnode","extend","obj","props","defer","Promise","resolve","then","setTimeout","slice","IS_NON_DIMENSIONAL","items","enqueueRender","component","_dirty","debounceRendering","list","renderComponent","isSameNodeType","node","hydrating","splitText","_componentConstructor","isNamedNode","normalizedNodeName","toLowerCase","getNodeProps","defaultProps","removeNode","parentNode","removeChild","setAccessor","old","isSvg","style","cssText","test","innerHTML","__html","useCapture","replace","substring","addEventListener","eventProxy","removeEventListener","_listeners","e","removeAttribute","removeAttributeNS","setAttributeNS","setAttribute","className","this","type","event","mounts","diffLevel","isSvgMode","flushMounts","afterMount","componentDidMount","diff","dom","context","mountAll","parent","componentRoot","ownerSVGElement","ret","idiff","appendChild","out","prevSvgMode","_component","nodeValue","document","createTextNode","replaceChild","recollectNodeTree","vnodeName","originalComponent","oldDom","isDirectOwner","isOwner","_parentComponent","constructor","setComponentProps","base","unmountComponent","createComponent","nextBase","buildComponentFromVNode","createElementNS","createElement","createNode","firstChild","fc","vchildren","a","nextSibling","isHydrating","j","f","vchild","originalChildren","childNodes","keyed","keyedLen","min","len","childrenLen","vlen","_child","__key","trim","insertBefore","innerDiffNode","dangerouslySetInnerHTML","attrs","diffAttributes","unmountOnly","ref","removeChildren","lastChild","next","previousSibling","recyclerComponents","Ctor","inst","doRender","splice","state","renderMode","_disable","__ref","getDerivedStateFromProps","componentWillMount","componentWillReceiveProps","prevContext","prevProps","syncComponentUpdates","isChild","rendered","cbase","previousProps","previousState","prevState","previousContext","isUpdate","initialBase","initialChildComponent","skip","snapshot","shouldComponentUpdate","componentWillUpdate","getChildContext","getSnapshotBeforeUpdate","toUnmount","childComponent","childProps","baseParent","componentRef","unshift","componentDidUpdate","afterUpdate","_renderCallbacks","beforeUnmount","componentWillUnmount","inner","merge","setState","callback","forceUpdate","preact","store","connect","split","u","getState","action","subscribe","unsubscribe","Provider","window","default","parseRadix","invalidRadix2","invalidRadix8","invalidRadix10","isValid","radix","res","exec","Error","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","dateOffsetToString","isMinus","minutes","Math","abs","dateToHalfUTCString","half","toISOString","indexOf","dateToStringWithCustomFormat","format","utc","match","rep","y","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","dateToString","Date","getTime","dateWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","getMilliseconds","dateToStringWithKind","Util_toString","quoteStrings","JSON","stringify","x","getPrototypeOf","Array","isArray","k","v","err","keys","map","join","ObjectRef","[object Object]","idMap","has","set","count","stringHash","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","GetHashCode","ar","ArrayBuffer","isView","equalArrays","eq","equals","Equals","compareDates","xtime","ytime","comparePrimitives","compareArrays","comp","compare","CompareTo","comparer","randomNext","max","floor","random","WeakMap","wasm","WebAssembly","Instance","Module","Uint8Array","Long","low","high","unsigned","isLong","__isLong__","Long_equals","Long_compare","Long_toString","toJSON","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","op_UnaryNegation","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromValue","val","fromString","RangeError","radixToPower","result","size","parseInt","op_Addition","op_Multiply","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","div","op_Division","rem1","op_Subtraction","rem","remDiv","digits","isOdd","other","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","op_LogicalNot","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","numBits","op_LeftShift","op_RightShift","log2","ceil","log","LN2","delta","approxRes","approxRem","fsFormatRegExp","toHex","bytes","le","fromBytes","hi","lo","Number","printf","input","cont","createPrinter","args","strCopy","arg","formatOnce","toConsole","console","str2","_","prefix","flags","pad","precision","toFixed","toPrecision","toExponential","toUpperCase","plusPrefix","ch","isRight","padLeft","delimiter","xs","sameType","declare","cons","superClass","subClass","writable","configurable","SystemObject","compareList","self","tail","head","List","L","Union","tag","fields","recordToJson","record","getFieldNames","recordEquals","thisNames","recordCompare","Record","id","from","iterator","cur","tmp","done","concat","contents","Exception","msg","message","getFSharpExceptionFieldNames","filter","FSharpException","fieldNames","arg1","arg2","arg3","Option_Some","toIterator","en","MoveNext","Current","append","ys","delay","firstDone","iters","unfold","collect","iter","output","innerIter","hasFinished","Seq_filter","fold","acc","rangeNumber","first","step","last","singleton","fst","field","Map_MapTree$00602","MapTreeModule$002EMapIterator$00602","started","MapTreeModule$$$collapseLHS","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","i$$2","matchValue$$4","MapTreeModule$$$current","i$$3","matchValue$$5","Reset","Dispose","FSharpMap","comparer$$17","tree","FSharpMap$$get_Tree","__$$5","kv","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult2445","that","m$$22","m2","res$$4","finished","e1","e2","matchValue$$7","kvp1","kvp2","c$$10","Compare","Set_SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","l$$1","r$$1","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$$$compare","comparer$$18","s1","s2","matchValue$$9","l1","l2","SetTreeModule$$$compareStacks","matchValue$$8","$target$$39","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","c$$7","c$$8","c$$9","matchValue$$6","SetTreeModule$$$current","i$$1","FSharpSet","comparer$$22","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","Array_ofSeq","source$$8","cons$$31","Array_ofList","source$$9","cons$$32","x$$22","y$$4","that$$1","Dr","start","dir","offset$$1","direction","pos","Row","Col","Nr","word","board$$1","newLetters","grid","f$$1","source$$1","cons$$2","len$$1","target$$2","i$$4","x$$1","Array_map","array$$28","cons$$17","Letters","off","pos$$2","Word","walkDirection","Position","Direction","Words","Rows","Cols","List_fold","$arg$$15","$arg$$16","$arg$$17","f$$2","state$$1","xs$$9","List_ofSeq","xs$$13","xs$$10","acc$$1","x$$6","List_reverse","acc$$3","x$$9","List_ofArray","xs$$51","folder$$8","array$$92","state$$12","reduceRight","acc$$5","x$$28","acc$$17","tryFindIndexed","f$$32","xs$$56","f$$29","xs$$53","$arg$$100","$arg$$101","$arg$$102","tryPickIndexedAux","f$$28","i$$9","_arg1$$9","xs$$52","tryPickIndexed","i$$10","x$$32","some","findIndexed","f$$34","xs$$58","acceptNull","Option_value","Br","En","wordSet","this$","pattern","this$$$2","pattern$$2","patternCount","Seq_length","patternAsList","tupledArg$$1","tupledArg","w$$1","wordAsList","this$$$1","pattern$$1","matchValue","letterMatch","w","allWords","board","words","board$$2","span$$3","candidateWords","wordlist","span$$1","WordSet$$FindWords$$7FDFC99","span","start$$1","dir$$1","length$$1","pos$$1","Length","spanAsPattern","wordList","addWordToBoard","span$$2","xs$$70","i$$12","_arg1$$13","xs$$28","acc$$9","_arg1$$7","List_length","wordlist$$1","width","height","ws","unfilledSpans","projection","xs$$90","comparer$$4","xs$$91","sort","x$$51","y$$18","_arg1","createEmptySpan","BoardPosition","board$$3","span$$4","fillSpan","width$$1","height$$1","target","targetIndex","fill","createBoard","$arg$$1","Zr","Hn","Kr","generateBoard","iterate","forEach","row","$r","Qr","extendStatics","b","setPrototypeOf","__proto__","__read","error","__spread","fullWordset","Set","wordboard","consonantsToWords","Map","item","stripVowels","collection","mapConsonantsToWords","LetterTile","_a","letter","selected","class","lettergrid_LetterGrid","_super","LetterGrid","_this","letters","handleMouseDrag","handleTouchDrag","__","__extends","buttons","handlePointerDrag","pageX","pageY","preventDefault","touches","onTrySelectLetter","letterComponent","values","find","left","top","eventInBounds","getBoundingClientRect","selectedLetters","rownum","colnum","onTouchStart","onTouchMove","onMouseDown","onMouseMove","Clue","wordTemplate","displayWord","idx","spanClass","Progress","total","createGameState","minConsonantLength","patternlist","trunc","randomElement","voweless","lookupFullWords","patternList","currentPatternIdx","foundWords","levelComplete","gameState","apply","unistore_es","directionOfSelection","existingSelections","second","deltaRow","deltaCol","canSelectLetter","newSelection","lastSelection","posEqual","moveInDirection","App","mapStateToProps","actions","unistore_preact","connectSafe","foundWord","newFoundWords","newPatternIdx","newLevel","selectLetter","position","replaceLastSelectedLetter","wrongWord","handleSelectionFinish","selectedWord","selection","fullWord","applySelectionToPattern","col","onClick","onPointerCancel","onPointerUp","onTouchEnd","onTouchCancel","onMouseLeave","positions","positionsToWord","getElementById"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","var VNode = function VNode() {};\n\nvar options = {};\n\nvar stack = [];\n\nvar EMPTY_CHILDREN = [];\n\nfunction h(nodeName, attributes) {\n\tvar children = EMPTY_CHILDREN,\n\t    lastSimple,\n\t    child,\n\t    simple,\n\t    i;\n\tfor (i = arguments.length; i-- > 2;) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children != null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop !== undefined) {\n\t\t\tfor (i = child.length; i--;) {\n\t\t\t\tstack.push(child[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof child === 'boolean') child = null;\n\n\t\t\tif (simple = typeof nodeName !== 'function') {\n\t\t\t\tif (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length - 1] += child;\n\t\t\t} else if (children === EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t} else {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tvar p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes == null ? undefined : attributes;\n\tp.key = attributes == null ? undefined : attributes.key;\n\n\tif (options.vnode !== undefined) options.vnode(p);\n\n\treturn p;\n}\n\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }return obj;\n}\n\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n}\n\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\nvar items = [];\n\nfunction enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\nfunction rerender() {\n\tvar p,\n\t    list = items;\n\titems = [];\n\twhile (p = list.pop()) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n\nfunction isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode === 'string' || typeof vnode === 'number') {\n\t\treturn node.splitText !== undefined;\n\t}\n\tif (typeof vnode.nodeName === 'string') {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\treturn hydrating || node._componentConstructor === vnode.nodeName;\n}\n\nfunction isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n\nfunction getNodeProps(vnode) {\n\tvar props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tvar defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps !== undefined) {\n\t\tfor (var i in defaultProps) {\n\t\t\tif (props[i] === undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n\nfunction createNode(nodeName, isSvg) {\n\tvar node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\nfunction removeNode(node) {\n\tvar parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nfunction setAccessor(node, name, old, value, isSvg) {\n\tif (name === 'className') name = 'class';\n\n\tif (name === 'key') {} else if (name === 'ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t} else if (name === 'class' && !isSvg) {\n\t\tnode.className = value || '';\n\t} else if (name === 'style') {\n\t\tif (!value || typeof value === 'string' || typeof old === 'string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value === 'object') {\n\t\t\tif (typeof old !== 'string') {\n\t\t\t\tfor (var i in old) {\n\t\t\t\t\tif (!(i in value)) node.style[i] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in value) {\n\t\t\t\tnode.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n\t\t\t}\n\t\t}\n\t} else if (name === 'dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t} else if (name[0] == 'o' && name[1] == 'n') {\n\t\tvar useCapture = name !== (name = name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t} else {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n\t\ttry {\n\t\t\tnode[name] = value == null ? '' : value;\n\t\t} catch (e) {}\n\t\tif ((value == null || value === false) && name != 'spellcheck') node.removeAttribute(name);\n\t} else {\n\t\tvar ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));\n\n\t\tif (value == null || value === false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n\t\t} else if (typeof value !== 'function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n\nvar mounts = [];\n\nvar diffLevel = 0;\n\nvar isSvgMode = false;\n\nvar hydrating = false;\n\nfunction flushMounts() {\n\tvar c;\n\twhile (c = mounts.pop()) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\tif (!diffLevel++) {\n\t\tisSvgMode = parent != null && parent.ownerSVGElement !== undefined;\n\n\t\thydrating = dom != null && !('__preactattr_' in dom);\n\t}\n\n\tvar ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\tif (parent && ret.parentNode !== parent) parent.appendChild(ret);\n\n\tif (! --diffLevel) {\n\t\thydrating = false;\n\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tvar out = dom,\n\t    prevSvgMode = isSvgMode;\n\n\tif (vnode == null || typeof vnode === 'boolean') vnode = '';\n\n\tif (typeof vnode === 'string' || typeof vnode === 'number') {\n\t\tif (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\tif (dom.nodeValue != vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t} else {\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout['__preactattr_'] = true;\n\n\t\treturn out;\n\t}\n\n\tvar vnodeName = vnode.nodeName;\n\tif (typeof vnodeName === 'function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\tisSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;\n\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\twhile (dom.firstChild) {\n\t\t\t\tout.appendChild(dom.firstChild);\n\t\t\t}\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\tvar fc = out.firstChild,\n\t    props = out['__preactattr_'],\n\t    vchildren = vnode.children;\n\n\tif (props == null) {\n\t\tprops = out['__preactattr_'] = {};\n\t\tfor (var a = out.attributes, i = a.length; i--;) {\n\t\t\tprops[a[i].name] = a[i].value;\n\t\t}\n\t}\n\n\tif (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n\t\tif (fc.nodeValue != vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t} else if (vchildren && vchildren.length || fc != null) {\n\t\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n\t\t}\n\n\tdiffAttributes(out, vnode.attributes, props);\n\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tvar originalChildren = dom.childNodes,\n\t    children = [],\n\t    keyed = {},\n\t    keyedLen = 0,\n\t    min = 0,\n\t    len = originalChildren.length,\n\t    childrenLen = 0,\n\t    vlen = vchildren ? vchildren.length : 0,\n\t    j,\n\t    c,\n\t    f,\n\t    vchild,\n\t    child;\n\n\tif (len !== 0) {\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tvar _child = originalChildren[i],\n\t\t\t    props = _child['__preactattr_'],\n\t\t\t    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n\t\t\tif (key != null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = _child;\n\t\t\t} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = _child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen !== 0) {\n\t\tfor (var i = 0; i < vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\tvar key = vchild.key;\n\t\t\tif (key != null) {\n\t\t\t\tif (keyedLen && keyed[key] !== undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t} else if (min < childrenLen) {\n\t\t\t\t\tfor (j = min; j < childrenLen; j++) {\n\t\t\t\t\t\tif (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\t\tif (j === childrenLen - 1) childrenLen--;\n\t\t\t\t\t\t\tif (j === min) min++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child !== dom && child !== f) {\n\t\t\t\tif (f == null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t} else if (child === f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t} else {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (keyedLen) {\n\t\tfor (var i in keyed) {\n\t\t\tif (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n\t\t}\n\t}\n\n\twhile (min <= childrenLen) {\n\t\tif ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n\t}\n}\n\nfunction recollectNodeTree(node, unmountOnly) {\n\tvar component = node._component;\n\tif (component) {\n\t\tunmountComponent(component);\n\t} else {\n\t\tif (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);\n\n\t\tif (unmountOnly === false || node['__preactattr_'] == null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\nfunction removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tvar next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\nfunction diffAttributes(dom, attrs, old) {\n\tvar name;\n\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name] != null) && old[name] != null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\tfor (name in attrs) {\n\t\tif (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n\nvar recyclerComponents = [];\n\nfunction createComponent(Ctor, props, context) {\n\tvar inst,\n\t    i = recyclerComponents.length;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t} else {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\twhile (i--) {\n\t\tif (recyclerComponents[i].constructor === Ctor) {\n\t\t\tinst.nextBase = recyclerComponents[i].nextBase;\n\t\t\trecyclerComponents.splice(i, 1);\n\t\t\treturn inst;\n\t\t}\n\t}\n\n\treturn inst;\n}\n\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n\nfunction setComponentProps(component, props, renderMode, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tcomponent.__ref = props.ref;\n\tcomponent.__key = props.key;\n\tdelete props.ref;\n\tdelete props.key;\n\n\tif (typeof component.constructor.getDerivedStateFromProps === 'undefined') {\n\t\tif (!component.base || mountAll) {\n\t\t\tif (component.componentWillMount) component.componentWillMount();\n\t\t} else if (component.componentWillReceiveProps) {\n\t\t\tcomponent.componentWillReceiveProps(props, context);\n\t\t}\n\t}\n\n\tif (context && context !== component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (renderMode !== 0) {\n\t\tif (renderMode === 1 || options.syncComponentUpdates !== false || !component.base) {\n\t\t\trenderComponent(component, 1, mountAll);\n\t\t} else {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\nfunction renderComponent(component, renderMode, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tvar props = component.props,\n\t    state = component.state,\n\t    context = component.context,\n\t    previousProps = component.prevProps || props,\n\t    previousState = component.prevState || state,\n\t    previousContext = component.prevContext || context,\n\t    isUpdate = component.base,\n\t    nextBase = component.nextBase,\n\t    initialBase = isUpdate || nextBase,\n\t    initialChildComponent = component._component,\n\t    skip = false,\n\t    snapshot = previousContext,\n\t    rendered,\n\t    inst,\n\t    cbase;\n\n\tif (component.constructor.getDerivedStateFromProps) {\n\t\tstate = extend(extend({}, state), component.constructor.getDerivedStateFromProps(props, state));\n\t\tcomponent.state = state;\n\t}\n\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (renderMode !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t} else if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tif (isUpdate && component.getSnapshotBeforeUpdate) {\n\t\t\tsnapshot = component.getSnapshotBeforeUpdate(previousProps, previousState);\n\t\t}\n\n\t\tvar childComponent = rendered && rendered.nodeName,\n\t\t    toUnmount,\n\t\t    base;\n\n\t\tif (typeof childComponent === 'function') {\n\n\t\t\tvar childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, 1, context, false);\n\t\t\t} else {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, 0, context, false);\n\t\t\t\trenderComponent(inst, 1, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t} else {\n\t\t\tcbase = initialBase;\n\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || renderMode === 1) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base !== initialBase && inst !== initialChildComponent) {\n\t\t\tvar baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base !== baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tvar componentRef = component,\n\t\t\t    t = component;\n\t\t\twhile (t = t._parentComponent) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t} else if (!skip) {\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, snapshot);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\twhile (component._renderCallbacks.length) {\n\t\tcomponent._renderCallbacks.pop().call(component);\n\t}if (!diffLevel && !isChild) flushMounts();\n}\n\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tvar c = dom && dom._component,\n\t    originalComponent = c,\n\t    oldDom = dom,\n\t    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n\t    isOwner = isDirectOwner,\n\t    props = getNodeProps(vnode);\n\twhile (c && !isOwner && (c = c._parentComponent)) {\n\t\tisOwner = c.constructor === vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, 3, context, mountAll);\n\t\tdom = c.base;\n\t} else {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, 1, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom !== oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\nfunction unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tvar base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\tvar inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t} else if (base) {\n\t\tif (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\trecyclerComponents.push(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n\nfunction Component(props, context) {\n\tthis._dirty = true;\n\n\tthis.context = context;\n\n\tthis.props = props;\n\n\tthis.state = this.state || {};\n\n\tthis._renderCallbacks = [];\n}\n\nextend(Component.prototype, {\n\tsetState: function setState(state, callback) {\n\t\tif (!this.prevState) this.prevState = this.state;\n\t\tthis.state = extend(extend({}, this.state), typeof state === 'function' ? state(this.state, this.props) : state);\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t},\n\tforceUpdate: function forceUpdate(callback) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\trenderComponent(this, 2);\n\t},\n\trender: function render() {}\n});\n\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nvar preact = {\n\th: h,\n\tcreateElement: h,\n\tcloneElement: cloneElement,\n\tComponent: Component,\n\trender: render,\n\trerender: rerender,\n\toptions: options\n};\n\nexport default preact;\nexport { h, h as createElement, cloneElement, Component, render, rerender, options };\n//# sourceMappingURL=preact.mjs.map\n","var t=require(\"preact\");function n(t,n){for(var r in n)t[r]=n[r];return t}function r(t){this.getChildContext=function(){return{store:t.store}}}r.prototype.render=function(t){return t.children[0]},exports.connect=function(r,e){var o;return\"function\"!=typeof r&&(\"string\"==typeof(o=r||[])&&(o=o.split(/\\s*,\\s*/)),r=function(t){for(var n={},r=0;r<o.length;r++)n[o[r]]=t[o[r]];return n}),function(o){function i(i,u){var c=this,f=u.store,s=r(f?f.getState():{},i),a=e?function(t,n){\"function\"==typeof t&&(t=t(n));var r={};for(var e in t)r[e]=n.action(t[e]);return r}(e,f):{store:f},p=function(){var t=r(f?f.getState():{},c.props);for(var n in t)if(t[n]!==s[n])return s=t,c.setState(null);for(var e in s)if(!(e in t))return s=t,c.setState(null)};this.componentDidMount=function(){f.subscribe(p)},this.componentWillUnmount=function(){f.unsubscribe(p)},this.render=function(r){return t.h(o,n(n(n({},a),r),s))}}return(i.prototype=new t.Component).constructor=i}},exports.Provider=r;\n//# sourceMappingURL=preact.js.map\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WordBoard\"] = factory();\n\telse\n\t\troot[\"WordBoard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const parseRadix = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\nconst invalidRadix2 = /[^01]/;\nconst invalidRadix8 = /[^0-7]/;\nconst invalidRadix10 = /[^0-9]/;\nexport function isValid(s, radix) {\n    const res = parseRadix.exec(s);\n    if (res != null) {\n        if (radix == null) {\n            switch (res[2]) {\n                case \"0b\":\n                case \"0B\":\n                    radix = 2;\n                    break;\n                case \"0o\":\n                case \"0O\":\n                    radix = 8;\n                    break;\n                case \"0x\":\n                case \"0X\":\n                    radix = 16;\n                    break;\n                default:\n                    radix = 10;\n                    break;\n            }\n        }\n        switch (radix) {\n            case 2:\n                return invalidRadix2.test(res[3]) ? null : [res, 2];\n            case 8:\n                return invalidRadix8.test(res[3]) ? null : [res, 8];\n            case 10:\n                return invalidRadix10.test(res[3]) ? null : [res, 10];\n            case 16:\n                return [res, 16];\n            default:\n                throw new Error(\"Invalid Base.\");\n        }\n    }\n    return null;\n}\n// TODO does this perfectly match the .NET behavior ?\nexport function tryParse(s, radix, initial) {\n    const a = isValid(s, radix);\n    if (a !== null) {\n        const [[, prefix, , digits], radix_] = a;\n        const v = parseInt((prefix || \"\") + digits, radix_);\n        if (!Number.isNaN(v)) {\n            return [true, v];\n        }\n    }\n    return [false, initial];\n}\nexport function parse(s, radix) {\n    const a = tryParse(s, radix, 0);\n    if (a[0]) {\n        return a[1];\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = match;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n        }\n        if (rep !== match && rep < 10 && match.length > 1) {\n            rep = \"0\" + rep;\n        }\n        return rep;\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + date.offset);\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(date.offset);\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, date.offset);\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function dateToString(date, format) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function toString(obj, quoteStrings = false) {\n    if (obj == null) {\n        return String(obj);\n    }\n    switch (typeof obj) {\n        case \"number\":\n        case \"boolean\":\n        case \"symbol\":\n        case \"undefined\":\n            return String(obj);\n        case \"string\":\n            return quoteStrings ? JSON.stringify(obj) : obj;\n        case \"function\":\n            return obj.name;\n        case \"object\":\n            // if (typeof obj.ToString === \"function\") {\n            //   return obj.ToString();\n            // }\n            // TODO: Print some elements of iterables?\n            if (isPlainObject(obj) || Array.isArray(obj)) {\n                try {\n                    return JSON.stringify(obj, (k, v) => {\n                        if (v != null) {\n                            if (v instanceof Date) {\n                                return dateToString(v);\n                            }\n                            else if (isIterable(v) && !Array.isArray(v) && typeof v !== \"string\") {\n                                return Array.from(v);\n                            }\n                        }\n                        return String(v);\n                    });\n                }\n                catch (err) {\n                    // Fallback for objects with circular references\n                    return \"{\" + Object.keys(obj).map((k) => k + \": \" + String(obj[k])).join(\", \") + \"}\";\n                }\n            }\n            else {\n                return obj instanceof Date ? dateToString(obj) : String(obj);\n            }\n    }\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(toString(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x[Symbol.iterator] === \"function\";\n}\nexport function isPlainObject(x) {\n    return x != null && Object.getPrototypeOf(x).constructor === Object;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n};\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + toString(kvPair));\n    }\n    const o = {};\n    for (let kvPair of fields) {\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        if (typeof kvPair.toJSON === \"function\") { // Deflate unions\n            kvPair = kvPair.toJSON();\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    return isArray(col) ? col.length : col.size;\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // return (...args: any[]) => {\n    //   // In some cases there may be more arguments applied than necessary\n    //   // (e.g. index when mapping an array), discard them\n    //   args = args.slice(0, arity);\n    //   let res = f;\n    //   while (args.length > 0) {\n    //       const curArgs = args.splice(0, res.length);\n    //       res = res.apply(null, curArgs);\n    //   }\n    //   return res;\n    // };\n    switch (arity) {\n        case 2:\n            return (a1, a2) => f(a1)(a2);\n        case 3:\n            return (a1, a2, a3) => f(a1)(a2)(a3);\n        case 4:\n            return (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n        case 5:\n            return (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n        case 6:\n            return (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n        case 7:\n            return (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n        case 8:\n            return (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/f572e3a17d313730cf11eb838f6d2a5e31626f8a/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { isValid } from \"./Int32\";\nimport { combineHashCodes } from \"./Util\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport default function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    return combineHashCodes([this.unsigned ? 1 : 0, this.high, this.low]);\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nexport const neg = op_UnaryNegation;\nexport const not = op_LogicalNot;\nexport const add = op_Addition;\nexport const sub = op_Subtraction;\nexport const mul = op_Multiply;\nexport const div = op_Division;\nexport const mod = op_Modulus;\nexport const shl = op_LeftShift;\nexport const shr = op_RightShift;\nexport const and = op_BitwiseAnd;\nexport const or = op_BitwiseOr;\nexport const xor = op_ExclusiveOr;\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return op_UnaryNegation(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * @param {number} value\n * @param {boolean} unsigned\n * @param {number} kind\n * @returns {!Long}\n * @inner\n */\nexport function fromInteger(value, unsigned, kind) {\n    var x;\n    var xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6: x = value >>> 0;\n    }\n    return fromBits(x, xh >> 31, unsigned);\n}\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    const a = isValid(str, radix);\n    if (a === null) {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n    str = a[0][3];\n    radix = a[1];\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return op_UnaryNegation(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = op_Addition(op_Multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = op_Multiply(result, radixToPower);\n            result = op_Addition(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n// For compatibility with Int32 module\nexport function parse(str, radix) {\n    return fromString(str, false, radix);\n}\nexport function tryParse(str, radix, defaultValue) {\n    try {\n        return [true, fromString(str, false, radix)];\n    }\n    catch (_a) {\n        return [false, defaultValue];\n    }\n}\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a 32 bit integer.\n * @returns {number}\n */\nexport function toIntNumber($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = op_Division($this, radixLong), rem1 = op_Subtraction(op_Multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(op_UnaryNegation($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = op_Division(rem, radixToPower), intval = toInt(op_Subtraction(rem, op_Multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(op_UnaryNegation($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value is negative.\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value differs from the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value is less than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Compares this Long's value with the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(op_Subtraction($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Absolute value of the given number.\n */\nexport function abs($this) {\n    if (!$this.unsigned && isNegative($this))\n        return op_UnaryNegation($this);\n    else\n        return $this;\n}\n/**\n * Negates this Long's value.\n * @returns {!Long} Negated Long\n */\nexport function op_UnaryNegation($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return op_Addition(op_LogicalNot($this), ONE);\n}\n;\n/**\n * Returns the sum of this and the specified Long.\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function op_Addition($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function op_Subtraction($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return op_Addition($this, op_UnaryNegation(subtrahend));\n}\n;\n/**\n * Returns the product of this and the specified Long.\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function op_Multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return op_Multiply(op_UnaryNegation($this), op_UnaryNegation(multiplier));\n        else\n            return op_UnaryNegation(op_Multiply(op_UnaryNegation($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return op_UnaryNegation(op_Multiply($this, op_UnaryNegation(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function op_Division($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = op_RightShift($this, 1);\n                approx = op_LeftShift(op_Division(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = op_Subtraction($this, op_Multiply(divisor, approx));\n                    res = op_Addition(approx, op_Division(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return op_Division(op_UnaryNegation($this), op_UnaryNegation(divisor));\n            return op_UnaryNegation(op_Division(op_UnaryNegation($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return op_UnaryNegation(op_Division($this, op_UnaryNegation(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, op_RightShiftUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = op_Multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = op_Multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = op_Addition(res, approxRes);\n        rem = op_Subtraction(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long modulo the specified.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function op_Modulus($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return op_Subtraction($this, op_Multiply(op_Division($this, divisor), divisor));\n}\n;\n/**\n * Returns the bitwise NOT of this Long.\n * @returns {!Long}\n */\nexport function op_LogicalNot($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseAnd($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_ExclusiveOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_LeftShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShiftUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Converts this Long to signed.\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const zero = unsigned ? UZERO : ZERO;\n    return (x) => greaterThan(step, zero) && lessThanOrEqual(x, last)\n        || lessThan(step, zero) && greaterThanOrEqual(x, last)\n        ? [x, op_Addition(x, step)] : null;\n}\n","import { toString as dateToString } from \"./Date\";\nimport Long, { fromBytes as longFromBytes, toBytes as longToBytes, toString as longToString } from \"./Long\";\nimport { escape } from \"./RegExp\";\nimport { toString } from \"./Util\";\nconst fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:(.+?))?\\}/g;\n// From https://stackoverflow.com/a/13653180/3922220\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return longToString(x.unsigned ? x : longFromBytes(longToBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, pad, precision, format) => {\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                rep = Number(rep).toFixed(precision || 6);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = Number(rep).toPrecision(precision);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = Number(rep).toExponential(precision);\n                break;\n            case \"O\":\n                rep = toString(rep);\n                break;\n            case \"A\":\n                rep = toString(rep, true);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n        }\n        const plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep, 10) >= 0;\n        pad = parseInt(pad, 10);\n        if (!isNaN(pad)) {\n            const ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n            rep = padLeft(String(rep), Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n        }\n        const once = prefix + (plusPrefix ? \"+\" + rep : rep);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (match, idx, pad, pattern) => {\n        let rep = args[idx];\n        let padSymbol = \" \";\n        if (typeof rep === \"number\" || rep instanceof Long) {\n            switch ((pattern || \"\").substring(0, 1)) {\n                case \"f\":\n                case \"F\":\n                    rep = pattern.length > 1 ? rep.toFixed(pattern.substring(1)) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = pattern.length > 1 ? rep.toPrecision(pattern.substring(1)) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = pattern.length > 1 ? rep.toExponential(pattern.substring(1)) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (pattern.length > 1 ? (rep * 100).toFixed(pattern.substring(1)) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"x\":\n                    rep = toHex(rep);\n                    break;\n                case \"X\":\n                    rep = toHex(rep).toUpperCase();\n                    break;\n                default:\n                    const m = /^(0+)(\\.0+)?$/.exec(pattern);\n                    if (m != null) {\n                        let decs = 0;\n                        if (m[2] != null) {\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        }\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (pattern) {\n                        rep = pattern;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern);\n        }\n        pad = parseInt((pad || \"\").substring(1), 10);\n        if (!isNaN(pad)) {\n            rep = padLeft(String(rep), Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function join(delimiter, ...xs) {\n    return xs.map((x) => String(x)).join(delimiter);\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return join(delimiter, ...xs.slice(startIndex, endIndexPlusOne));\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmed = trim(str, \"{\", \"}\");\n    if (guidRegex.test(trimmed)) {\n        return doNotThrow ? [true, trimmed] : trimmed;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    return _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter(pred).join(\"\");\n}\n","import { combineHashCodes, compare, compareArrays, equals, equalArrays, identityHash, structuralHash, numberHash, toString } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + toString(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map(x => toString(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function L(h, t) {\n    return new List(h, t);\n}\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + toString(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map(toString).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    let hashes = this.fields.map(structuralHash);\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + toString(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter(k => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map(k => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { });\n","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash, toString } from \"./Util\";\n// Options are erased in runtime by Fable, but we have\n// the `Some` type below to wrap values that would evaluate\n// to null in runtime. These two rules must be followed:\n// 1- None is always null in runtime, a non-strict null check\n//    (`x == null`) is enough to check the case of an option.\n// 2- To get the value of an option the `getValue` helper\n//    below must **always** be used.\n// export type Option<T> = T | Some<T>;\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return toString(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        return other == null\n            ? false\n            : equals(this.value, other instanceof Some ? other.value : other);\n    }\n    CompareTo(other) {\n        return other == null\n            ? 1\n            : compare(this.value, other instanceof Some ? other.value : other);\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n","import { makeRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs) {\n    let count = 1;\n    const sum = reduce((acc, x) => {\n        count++;\n        return acc + x;\n    }, xs);\n    return sum / count;\n}\nexport function averageBy(f, xs) {\n    let count = 1;\n    const sum = reduce((acc, x) => {\n        count++;\n        return (count === 2 ? f(acc) : acc) + f(x);\n    }, xs);\n    return sum / count;\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function forAll(f, xs) {\n    return fold((acc, x) => acc && f(x), true, xs);\n}\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => acc && f(x, y), true, xs, ys);\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs) {\n    return fold((acc, x) => acc + x, 0, xs);\n}\nexport function sumBy(f, xs) {\n    return fold((acc, x) => acc + f(x), 0, xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n","import { Record, L, declare, Union } from \"./Types\";\nimport { value as value$$3, some } from \"./Option\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$1, unfold, getEnumerator, fold as fold$$1 } from \"./Seq\";\nimport { join, toText, printf } from \"./String\";\nimport { compare, structuralHash } from \"./Util\";\nexport const MapTree$00602 = declare(function MapTree$00602(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTreeModule$$$sizeAux(acc, m) {\n  MapTreeModule$$$sizeAux: while (true) {\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          const r = m.fields[3];\n          const l = m.fields[2];\n          acc = MapTreeModule$$$sizeAux(acc + 1, l);\n          m = r;\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        const h = _arg1.fields[4] | 0;\n        return h | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  const matchValue = [l$$1, r$$1];\n  var $target$$3;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$3 = 0;\n    } else {\n      $target$$3 = 1;\n    }\n  } else {\n    $target$$3 = 1;\n  }\n\n  switch ($target$$3) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      const t2v = t2.fields[1];\n      const t2r = t2.fields[3];\n      const t2l = t2.fields[2];\n      const t2k = t2.fields[0];\n\n      if (MapTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 2) {\n          const t2lv = t2l.fields[1];\n          const t2lr = t2l.fields[3];\n          const t2ll = t2l.fields[2];\n          const t2lk = t2l.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2ll), t2lk, t2lv, MapTreeModule$$$mk(t2lr, t2k, t2v, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2l), t2k, t2v, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      const t1v = t1.fields[1];\n      const t1r = t1.fields[3];\n      const t1l = t1.fields[2];\n      const t1k = t1.fields[0];\n\n      if (MapTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 2) {\n          const t1rv = t1r.fields[1];\n          const t1rr = t1r.fields[3];\n          const t1rl = t1r.fields[2];\n          const t1rk = t1r.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1l, t1k, t1v, t1rl), t1rk, t1rv, MapTreeModule$$$mk(t1rr, k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1l, t1k, t1v, MapTreeModule$$$mk(t1r, k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const k2 = m$$3.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const v2 = m$$3.fields[1];\n        const r$$2 = m$$3.fields[3];\n        const l$$2 = m$$3.fields[2];\n        const k2$$1 = m$$3.fields[0];\n        const h$$1 = m$$3.fields[4] | 0;\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, l$$2), k2$$1, v2, r$$2);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, l$$2, r$$2, h$$1);\n        } else {\n          return MapTreeModule$$$rebalance(l$$2, k2$$1, v2, MapTreeModule$$$add(comparer, k$$2, v$$2, r$$2));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find(comparer$$1, k$$3, m$$4) {\n  MapTreeModule$$$find: while (true) {\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const v2$$1 = m$$4.fields[1];\n          const k2$$2 = m$$4.fields[0];\n          const c$$2 = comparer$$1.Compare(k$$3, k2$$2) | 0;\n\n          if (c$$2 === 0) {\n            return v2$$1;\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const v2$$2 = m$$4.fields[1];\n          const r$$3 = m$$4.fields[3];\n          const l$$3 = m$$4.fields[2];\n          const k2$$3 = m$$4.fields[0];\n          const c$$3 = comparer$$1.Compare(k$$3, k2$$3) | 0;\n\n          if (c$$3 < 0) {\n            comparer$$1 = comparer$$1;\n            k$$3 = k$$3;\n            m$$4 = l$$3;\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return v2$$2;\n          } else {\n            comparer$$1 = comparer$$1;\n            k$$3 = k$$3;\n            m$$4 = r$$3;\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$tryFind(comparer$$2, k$$4, m$$5) {\n  MapTreeModule$$$tryFind: while (true) {\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const v2$$3 = m$$5.fields[1];\n          const k2$$4 = m$$5.fields[0];\n          const c$$4 = comparer$$2.Compare(k$$4, k2$$4) | 0;\n\n          if (c$$4 === 0) {\n            return some(v2$$3);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const v2$$4 = m$$5.fields[1];\n          const r$$4 = m$$5.fields[3];\n          const l$$4 = m$$5.fields[2];\n          const k2$$5 = m$$5.fields[0];\n          const c$$5 = comparer$$2.Compare(k$$4, k2$$5) | 0;\n\n          if (c$$5 < 0) {\n            comparer$$2 = comparer$$2;\n            k$$4 = k$$4;\n            m$$5 = l$$4;\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(v2$$4);\n          } else {\n            comparer$$2 = comparer$$2;\n            k$$4 = k$$4;\n            m$$5 = r$$4;\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($arg$$10, $arg$$11, $arg$$12, $arg$$13, $arg$$14) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $arg$$10,\n          f$$1 = $arg$$11,\n          s = $arg$$12,\n          acc_0 = $arg$$13,\n          acc_1 = $arg$$14;\n    const acc$$1 = [acc_0, acc_1];\n\n    switch (s.tag) {\n      case 1:\n        {\n          const v$$4 = s.fields[1];\n          const k$$6 = s.fields[0];\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, k$$6, v$$4, acc$$1[0], acc$$1[1]);\n        }\n\n      case 2:\n        {\n          const v$$5 = s.fields[1];\n          const r$$5 = s.fields[3];\n          const l$$5 = s.fields[2];\n          const k$$7 = s.fields[0];\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, r$$5, acc$$1[0], acc$$1[1]);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, k$$7, v$$5, acc$$2[0], acc$$2[1]);\n          $arg$$10 = comparer$$4;\n          $arg$$11 = f$$1;\n          $arg$$12 = l$$5;\n          $arg$$13 = acc$$3[0];\n          $arg$$14 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return acc$$1;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($arg$$23, $arg$$24, $arg$$25, $arg$$26) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$23,\n          f$$4 = $arg$$24,\n          s$$2 = $arg$$25,\n          acc$$5 = $arg$$26;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          const v$$7 = s$$2.fields[1];\n          const k$$9 = s$$2.fields[0];\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, k$$9, v$$7, acc$$5);\n        }\n\n      case 2:\n        {\n          const v$$8 = s$$2.fields[1];\n          const r$$6 = s$$2.fields[3];\n          const l$$6 = s$$2.fields[2];\n          const k$$10 = s$$2.fields[0];\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, l$$6, acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, k$$10, v$$8, acc$$6);\n          $arg$$23 = comparer$$7;\n          $arg$$24 = f$$4;\n          $arg$$25 = r$$6;\n          $arg$$26 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        const v2$$5 = m$$6.fields[1];\n        const k2$$6 = m$$6.fields[0];\n        return [k2$$6, v2$$5, new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        const v2$$6 = m$$6.fields[1];\n        const r$$7 = m$$6.fields[3];\n        const l$$7 = m$$6.fields[2];\n        const k2$$7 = m$$6.fields[0];\n\n        if (l$$7.tag === 0) {\n          return [k2$$7, v2$$6, r$$7];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(l$$7);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], k2$$7, v2$$6, r$$7)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const k2$$8 = m$$7.fields[0];\n        const c$$6 = comparer$$9.Compare(k$$11, k2$$8) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const v2$$7 = m$$7.fields[1];\n        const r$$8 = m$$7.fields[3];\n        const l$$8 = m$$7.fields[2];\n        const k2$$9 = m$$7.fields[0];\n        const c$$7 = comparer$$9.Compare(k$$11, k2$$9) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, l$$8), k2$$9, v2$$7, r$$8);\n        } else if (c$$7 === 0) {\n          const matchValue$$1 = [l$$8, r$$8];\n\n          if (matchValue$$1[0].tag === 0) {\n            return r$$8;\n          } else if (matchValue$$1[1].tag === 0) {\n            return l$$8;\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(r$$8);\n            return MapTreeModule$$$mk(l$$8, patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(l$$8, k2$$9, v2$$7, MapTreeModule$$$remove(comparer$$9, k$$11, r$$8));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem(comparer$$10, k$$12, m$$8) {\n  MapTreeModule$$$mem: while (true) {\n    switch (m$$8.tag) {\n      case 1:\n        {\n          const k2$$10 = m$$8.fields[0];\n          return comparer$$10.Compare(k$$12, k2$$10) === 0;\n        }\n\n      case 2:\n        {\n          const r$$9 = m$$8.fields[3];\n          const l$$9 = m$$8.fields[2];\n          const k2$$11 = m$$8.fields[0];\n          const c$$8 = comparer$$10.Compare(k$$12, k2$$11) | 0;\n\n          if (c$$8 < 0) {\n            comparer$$10 = comparer$$10;\n            k$$12 = k$$12;\n            m$$8 = l$$9;\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            comparer$$10 = comparer$$10;\n            k$$12 = k$$12;\n            m$$8 = r$$9;\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$iter(f$$6, m$$9) {\n  switch (m$$9.tag) {\n    case 1:\n      {\n        const v2$$8 = m$$9.fields[1];\n        const k2$$12 = m$$9.fields[0];\n        f$$6(k2$$12, v2$$8);\n        break;\n      }\n\n    case 2:\n      {\n        const v2$$9 = m$$9.fields[1];\n        const r$$10 = m$$9.fields[3];\n        const l$$10 = m$$9.fields[2];\n        const k2$$13 = m$$9.fields[0];\n        MapTreeModule$$$iter(f$$6, l$$10);\n        f$$6(k2$$13, v2$$9);\n        MapTreeModule$$$iter(f$$6, r$$10);\n        break;\n      }\n\n    default:\n      {}\n  }\n}\nexport function MapTreeModule$$$tryPick($arg$$32, $arg$$33) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $arg$$32,\n          m$$10 = $arg$$33;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          const v2$$10 = m$$10.fields[1];\n          const k2$$14 = m$$10.fields[0];\n          return f$$7(k2$$14, v2$$10);\n        }\n\n      case 2:\n        {\n          const v2$$11 = m$$10.fields[1];\n          const r$$11 = m$$10.fields[3];\n          const l$$11 = m$$10.fields[2];\n          const k2$$15 = m$$10.fields[0];\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, l$$11);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(k2$$15, v2$$11);\n\n            if (matchValue$$3 == null) {\n              $arg$$32 = f$$7;\n              $arg$$33 = r$$11;\n              continue MapTreeModule$$$tryPick;\n            } else {\n              const res$$1 = matchValue$$3;\n              return res$$1;\n            }\n          } else {\n            const res = matchValue$$2;\n            return res;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$exists($arg$$34, $arg$$35) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $arg$$34,\n          m$$11 = $arg$$35;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          const v2$$12 = m$$11.fields[1];\n          const k2$$16 = m$$11.fields[0];\n          return f$$8(k2$$16, v2$$12);\n        }\n\n      case 2:\n        {\n          const v2$$13 = m$$11.fields[1];\n          const r$$12 = m$$11.fields[3];\n          const l$$12 = m$$11.fields[2];\n          const k2$$17 = m$$11.fields[0];\n\n          if (MapTreeModule$$$exists(f$$8, l$$12) ? true : f$$8(k2$$17, v2$$13)) {\n            return true;\n          } else {\n            $arg$$34 = f$$8;\n            $arg$$35 = r$$12;\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$forall($arg$$36, $arg$$37) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $arg$$36,\n          m$$12 = $arg$$37;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          const v2$$14 = m$$12.fields[1];\n          const k2$$18 = m$$12.fields[0];\n          return f$$9(k2$$18, v2$$14);\n        }\n\n      case 2:\n        {\n          const v2$$15 = m$$12.fields[1];\n          const r$$13 = m$$12.fields[3];\n          const l$$13 = m$$12.fields[2];\n          const k2$$19 = m$$12.fields[0];\n\n          if (MapTreeModule$$$forall(f$$9, l$$13) ? f$$9(k2$$19, v2$$15) : false) {\n            $arg$$36 = f$$9;\n            $arg$$37 = r$$13;\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        const v$$9 = m$$13.fields[1];\n        const k$$13 = m$$13.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$13, f$$10(v$$9));\n      }\n\n    case 2:\n      {\n        const v$$10 = m$$13.fields[1];\n        const r$$14 = m$$13.fields[3];\n        const l$$14 = m$$13.fields[2];\n        const k$$14 = m$$13.fields[0];\n        const h$$2 = m$$13.fields[4] | 0;\n        const l2 = MapTreeModule$$$map(f$$10, l$$14);\n        const v2$$16 = f$$10(v$$10);\n        const r2 = MapTreeModule$$$map(f$$10, r$$14);\n        return new MapTree$00602(2, \"MapNode\", k$$14, v2$$16, l2, r2, h$$2);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        const v$$11 = m$$14.fields[1];\n        const k$$15 = m$$14.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$15, f$$11(k$$15, v$$11));\n      }\n\n    case 2:\n      {\n        const v$$12 = m$$14.fields[1];\n        const r$$15 = m$$14.fields[3];\n        const l$$15 = m$$14.fields[2];\n        const k$$16 = m$$14.fields[0];\n        const h$$3 = m$$14.fields[4] | 0;\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, l$$15);\n        const v2$$17 = f$$11(k$$16, v$$12);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, r$$15);\n        return new MapTree$00602(2, \"MapNode\", k$$16, v2$$17, l2$$1, r2$$1, h$$3);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($arg$$42, $arg$$43, $arg$$44) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $arg$$42,\n          m$$15 = $arg$$43,\n          x$$1 = $arg$$44;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          const v$$13 = m$$15.fields[1];\n          const k$$17 = m$$15.fields[0];\n          return f$$12(k$$17, v$$13, x$$1);\n        }\n\n      case 2:\n        {\n          const v$$14 = m$$15.fields[1];\n          const r$$16 = m$$15.fields[3];\n          const l$$16 = m$$15.fields[2];\n          const k$$18 = m$$15.fields[0];\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, r$$16, x$$1);\n          const x$$3 = f$$12(k$$18, v$$14, x$$2);\n          $arg$$42 = f$$12;\n          $arg$$43 = l$$16;\n          $arg$$44 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$fold($arg$$45, $arg$$46, $arg$$47) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $arg$$45,\n          x$$4 = $arg$$46,\n          m$$16 = $arg$$47;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          const v$$15 = m$$16.fields[1];\n          const k$$19 = m$$16.fields[0];\n          return f$$13(x$$4, k$$19, v$$15);\n        }\n\n      case 2:\n        {\n          const v$$16 = m$$16.fields[1];\n          const r$$17 = m$$16.fields[3];\n          const l$$17 = m$$16.fields[2];\n          const k$$20 = m$$16.fields[0];\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, l$$17);\n          const x$$6 = f$$13(x$$5, k$$20, v$$16);\n          $arg$$45 = f$$13;\n          $arg$$46 = x$$6;\n          $arg$$47 = r$$17;\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const v$$17 = m$$17.fields[1];\n        const k$$21 = m$$17.fields[0];\n        const cLoKey = comparer$$11.Compare(lo, k$$21) | 0;\n        const cKeyHi = comparer$$11.Compare(k$$21, hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(k$$21, v$$17, x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const v$$18 = m$$17.fields[1];\n        const r$$18 = m$$17.fields[3];\n        const l$$18 = m$$17.fields[2];\n        const k$$22 = m$$17.fields[0];\n        const cLoKey$$1 = comparer$$11.Compare(lo, k$$22) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(k$$22, hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, l$$18, x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(k$$22, v$$18, x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, r$$18, x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop(m$$19, acc$$8) {\n  MapTreeModule$$$loop: while (true) {\n    switch (m$$19.tag) {\n      case 1:\n        {\n          const v$$19 = m$$19.fields[1];\n          const k$$23 = m$$19.fields[0];\n          return L([k$$23, v$$19], acc$$8);\n        }\n\n      case 2:\n        {\n          const v$$20 = m$$19.fields[1];\n          const r$$19 = m$$19.fields[3];\n          const l$$19 = m$$19.fields[2];\n          const k$$24 = m$$19.fields[0];\n          m$$19 = l$$19;\n          acc$$8 = L([k$$24, v$$20], MapTreeModule$$$loop(r$$19, acc$$8));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, L());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator(comparer$$14, acc$$10, e) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      const $var$$60 = comparer$$14;\n      acc$$10 = MapTreeModule$$$add(comparer$$14, patternInput$$2[0], patternInput$$2[1], acc$$10);\n      e = e;\n      comparer$$14 = $var$$60;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    ie.Dispose();\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function MapTreeModule$002EMapIterator$00602(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$$$collapseLHS(stack) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        stack = L(stack.head.fields[2], L(new MapTree$00602(1, \"MapOne\", stack.head.fields[0], stack.head.fields[1]), L(stack.head.fields[3], stack.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        stack = stack.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return L();\n    }\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(L(s$$5, L())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function MapTreeModule$002EmkIEnumerator$0027$00602(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this != null ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function FSharpMap(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this != null ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  const this$ = this;\n  return \"map [\" + join(\"; \", ...map$$1(function mapping(kv) {\n    return toText(printf(\"(%A, %A)\"))(kv[0])(kv[1]);\n  }, this$)) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const activePatternResult2445 = e$$1.Current;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult2445[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult2445[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  const m2 = obj;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m2));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      e2.Dispose();\n    }\n  } finally {\n    e1.Dispose();\n  }\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$34, v$$26, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$34, v$$26);\n}\nexport function find(k$$35, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$35);\n}\nexport function tryFind(k$$36, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$36);\n}\nexport function remove(k$$37, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$37);\n}\nexport function containsKey(k$$38, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$38);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  const _arg1$$1 = MapTreeModule$$$tryPick(function f$$39(k$$39, v$$27) {\n    if (f$$38(k$$39, v$$27)) {\n      return some(k$$39);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$41));\n\n  if (_arg1$$1 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$40 = value$$3(_arg1$$1);\n    return k$$40;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  return MapTreeModule$$$tryPick(function f$$41(k$$41, v$$28) {\n    if (f$$40(k$$41, v$$28)) {\n      return some(k$$41);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$43));\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  const res$$6 = new Array(FSharpMap$$get_Count(m$$46));\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$42) {\n      return MapTreeModule$$$find(comparer$$22, k$$42, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      return map$$1(function mapping$$1(kv$$1) {\n        return kv$$1[0];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    set(k$$43, v$$29) {\n      const this$$$3 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$43, v$$29, tree$$1);\n      return this$$$3;\n    },\n\n    values() {\n      return map$$1(function mapping$$2(kv$$2) {\n        return kv$$2[1];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$3, comparer$$23) {\n  return createMutablePrivate(comparer$$23, MapTreeModule$$$ofSeq(comparer$$23, source$$3));\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$30) {\n    const key = projection(v$$30);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$30);\n    } else {\n      dict.set(key, Array.from([v$$30]));\n    }\n  }, xs);\n  return map$$1(function mapping$$3(kv$$3) {\n    return [kv$$3[0], kv$$3[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1);\n  }, xs$$1);\n  return map$$1(function mapping$$4(kv$$4) {\n    return [kv$$4[0], kv$$4[1]];\n  }, dict$$1);\n}","import { L, Record, declare, Union } from \"./Types\";\nimport { value as value$$2, some, Choice } from \"./Option\";\nimport { iterate as iterate$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq\";\nimport { structuralHash, toString } from \"./Util\";\nimport { join } from \"./String\";\nexport const SetTree$00601 = declare(function SetTree$00601(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTreeModule$$$countAux(s, acc) {\n  SetTreeModule$$$countAux: while (true) {\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          const r = s.fields[2];\n          const l = s.fields[1];\n          s = l;\n          acc = SetTreeModule$$$countAux(r, acc + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        const h$$1 = t.fields[3] | 0;\n        return h$$1 | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  const matchValue = [l$$2, r$$2];\n  var $target$$3;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$3 = 0;\n    } else {\n      $target$$3 = 1;\n    }\n  } else {\n    $target$$3 = 1;\n  }\n\n  switch ($target$$3) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      const t2r = t2.fields[2];\n      const t2l = t2.fields[1];\n      const t2k = t2.fields[0];\n\n      if (SetTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 1) {\n          const t2lr = t2l.fields[2];\n          const t2ll = t2l.fields[1];\n          const t2lk = t2l.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2ll), t2lk, SetTreeModule$$$mk(t2lr, t2k, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2l), t2k, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      const t1r = t1.fields[2];\n      const t1l = t1.fields[1];\n      const t1k = t1.fields[0];\n\n      if (SetTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 1) {\n          const t1rr = t1r.fields[2];\n          const t1rl = t1r.fields[1];\n          const t1rk = t1r.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1l, t1k, t1rl), t1rk, SetTreeModule$$$mk(t1rr, k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1l, t1k, SetTreeModule$$$mk(t1r, k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const k2$$1 = t$$1.fields[0];\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const r$$3 = t$$1.fields[2];\n        const l$$3 = t$$1.fields[1];\n        const k2 = t$$1.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, l$$3), k2, r$$3);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(l$$3, k2, SetTreeModule$$$add(comparer, k$$2, r$$3));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  const matchValue$$1 = [t1$$1, t2$$1];\n  var $target$$4, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (matchValue$$1[0].tag === 2) {\n    if (matchValue$$1[1].tag === 0) {\n      $target$$4 = 1;\n      t1$$2 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 2) {\n      $target$$4 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    } else {\n      $target$$4 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    }\n  } else if (matchValue$$1[0].tag === 1) {\n    if (matchValue$$1[1].tag === 2) {\n      $target$$4 = 3;\n      k2$$2 = matchValue$$1[1].fields[0];\n      t1$$3 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 1) {\n      $target$$4 = 4;\n      h1 = matchValue$$1[0].fields[3];\n      h2 = matchValue$$1[1].fields[3];\n      k1$$1 = matchValue$$1[0].fields[0];\n      k2$$3 = matchValue$$1[1].fields[0];\n      t11 = matchValue$$1[0].fields[1];\n      t12 = matchValue$$1[0].fields[2];\n      t21 = matchValue$$1[1].fields[1];\n      t22 = matchValue$$1[1].fields[2];\n    } else {\n      $target$$4 = 1;\n      t1$$2 = matchValue$$1[0];\n    }\n  } else {\n    $target$$4 = 0;\n    t2$$2 = matchValue$$1[1];\n  }\n\n  switch ($target$$4) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const k1$$3 = t$$2.fields[0];\n        const c$$3 = comparer$$2.Compare(k1$$3, pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const t12$$1 = t$$2.fields[2];\n        const t11$$1 = t$$2.fields[1];\n        const k1$$2 = t$$2.fields[0];\n        const c$$2 = comparer$$2.Compare(pivot, k1$$2) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t11$$1);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], k1$$2, t12$$1)];\n        } else if (c$$2 === 0) {\n          return [t11$$1, true, t12$$1];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t12$$1);\n          return [SetTreeModule$$$balance(comparer$$2, t11$$1, k1$$2, patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        const k2$$4 = t$$3.fields[0];\n        return [k2$$4, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        const r$$4 = t$$3.fields[2];\n        const l$$4 = t$$3.fields[1];\n        const k2$$5 = t$$3.fields[0];\n\n        if (l$$4.tag === 0) {\n          return [k2$$5, r$$4];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(l$$4);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], k2$$5, r$$4)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const k2$$6 = t$$4.fields[0];\n        const c$$4 = comparer$$3.Compare(k$$4, k2$$6) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const r$$5 = t$$4.fields[2];\n        const l$$5 = t$$4.fields[1];\n        const k2$$7 = t$$4.fields[0];\n        const c$$5 = comparer$$3.Compare(k$$4, k2$$7) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, l$$5), k2$$7, r$$5);\n        } else if (c$$5 === 0) {\n          const matchValue$$2 = [l$$5, r$$5];\n\n          if (matchValue$$2[0].tag === 0) {\n            return r$$5;\n          } else if (matchValue$$2[1].tag === 0) {\n            return l$$5;\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(r$$5);\n            return SetTreeModule$$$mk(l$$5, patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(l$$5, k2$$7, SetTreeModule$$$remove(comparer$$3, k$$4, r$$5));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem(comparer$$4, k$$5, t$$5) {\n  SetTreeModule$$$mem: while (true) {\n    switch (t$$5.tag) {\n      case 2:\n        {\n          const k2$$9 = t$$5.fields[0];\n          return comparer$$4.Compare(k$$5, k2$$9) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$6 = t$$5.fields[2];\n          const l$$6 = t$$5.fields[1];\n          const k2$$8 = t$$5.fields[0];\n          const c$$6 = comparer$$4.Compare(k$$5, k2$$8) | 0;\n\n          if (c$$6 < 0) {\n            comparer$$4 = comparer$$4;\n            k$$5 = k$$5;\n            t$$5 = l$$6;\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            comparer$$4 = comparer$$4;\n            k$$5 = k$$5;\n            t$$5 = r$$6;\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$iter(f, t$$6) {\n  switch (t$$6.tag) {\n    case 2:\n      {\n        const k2$$11 = t$$6.fields[0];\n        f(k2$$11);\n        break;\n      }\n\n    case 0:\n      {\n        break;\n      }\n\n    default:\n      {\n        const r$$7 = t$$6.fields[2];\n        const l$$7 = t$$6.fields[1];\n        const k2$$10 = t$$6.fields[0];\n        SetTreeModule$$$iter(f, l$$7);\n        f(k2$$10);\n        SetTreeModule$$$iter(f, r$$7);\n      }\n  }\n}\nexport function SetTreeModule$$$foldBack($arg$$7, $arg$$8, $arg$$9) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $arg$$7,\n          m$$1 = $arg$$8,\n          x$$1 = $arg$$9;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          const k$$7 = m$$1.fields[0];\n          return f$$1(k$$7, x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          const r$$8 = m$$1.fields[2];\n          const l$$8 = m$$1.fields[1];\n          const k$$6 = m$$1.fields[0];\n          $arg$$7 = f$$1;\n          $arg$$8 = l$$8;\n          $arg$$9 = f$$1(k$$6, SetTreeModule$$$foldBack(f$$1, r$$8, x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$fold($arg$$10, $arg$$11, $arg$$12) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $arg$$10,\n          x$$2 = $arg$$11,\n          m$$2 = $arg$$12;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          const k$$9 = m$$2.fields[0];\n          return f$$2(x$$2, k$$9);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const r$$9 = m$$2.fields[2];\n          const l$$9 = m$$2.fields[1];\n          const k$$8 = m$$2.fields[0];\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, l$$9);\n          const x$$4 = f$$2(x$$3, k$$8);\n          $arg$$10 = f$$2;\n          $arg$$11 = x$$4;\n          $arg$$12 = r$$9;\n          continue SetTreeModule$$$fold;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$forall($arg$$13, $arg$$14) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $arg$$13,\n          m$$3 = $arg$$14;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          const k2$$13 = m$$3.fields[0];\n          return f$$3(k2$$13);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          const r$$10 = m$$3.fields[2];\n          const l$$10 = m$$3.fields[1];\n          const k2$$12 = m$$3.fields[0];\n\n          if (f$$3(k2$$12) ? SetTreeModule$$$forall(f$$3, l$$10) : false) {\n            $arg$$13 = f$$3;\n            $arg$$14 = r$$10;\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$exists($arg$$15, $arg$$16) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $arg$$15,\n          m$$4 = $arg$$16;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          const k2$$15 = m$$4.fields[0];\n          return f$$4(k2$$15);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$11 = m$$4.fields[2];\n          const l$$11 = m$$4.fields[1];\n          const k2$$14 = m$$4.fields[0];\n\n          if (f$$4(k2$$14) ? true : SetTreeModule$$$exists(f$$4, l$$11)) {\n            return true;\n          } else {\n            $arg$$15 = f$$4;\n            $arg$$16 = r$$11;\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($arg$$17, $arg$$18, $arg$$19, $arg$$20) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$17,\n          f$$5 = $arg$$18,\n          s$$2 = $arg$$19,\n          acc$$1 = $arg$$20;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          const k$$11 = s$$2.fields[0];\n\n          if (f$$5(k$$11)) {\n            return SetTreeModule$$$add(comparer$$7, k$$11, acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const r$$12 = s$$2.fields[2];\n          const l$$12 = s$$2.fields[1];\n          const k$$10 = s$$2.fields[0];\n          const acc$$2 = f$$5(k$$10) ? SetTreeModule$$$add(comparer$$7, k$$10, acc$$1) : acc$$1;\n          $arg$$17 = comparer$$7;\n          $arg$$18 = f$$5;\n          $arg$$19 = l$$12;\n          $arg$$20 = SetTreeModule$$$filterAux(comparer$$7, f$$5, r$$12, acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux(comparer$$9, m$$6, acc$$3) {\n  SetTreeModule$$$diffAux: while (true) {\n    switch (m$$6.tag) {\n      case 2:\n        {\n          const k$$13 = m$$6.fields[0];\n          return SetTreeModule$$$remove(comparer$$9, k$$13, acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          const r$$13 = m$$6.fields[2];\n          const l$$13 = m$$6.fields[1];\n          const k$$12 = m$$6.fields[0];\n          const $var$$24 = comparer$$9;\n          m$$6 = l$$13;\n          acc$$3 = SetTreeModule$$$diffAux(comparer$$9, r$$13, SetTreeModule$$$remove(comparer$$9, k$$12, acc$$3));\n          comparer$$9 = $var$$24;\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  const matchValue$$3 = [t1$$4, t2$$4];\n  var $target$$25, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (matchValue$$3[0].tag === 0) {\n    $target$$25 = 1;\n    t$$7 = matchValue$$3[1];\n  } else if (matchValue$$3[0].tag === 2) {\n    if (matchValue$$3[1].tag === 0) {\n      $target$$25 = 2;\n      t$$8 = matchValue$$3[0];\n    } else if (matchValue$$3[1].tag === 2) {\n      $target$$25 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    } else {\n      $target$$25 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    }\n  } else if (matchValue$$3[1].tag === 0) {\n    $target$$25 = 2;\n    t$$8 = matchValue$$3[0];\n  } else if (matchValue$$3[1].tag === 2) {\n    $target$$25 = 4;\n    k2$$17 = matchValue$$3[1].fields[0];\n    t1$$5 = matchValue$$3[0];\n  } else {\n    $target$$25 = 0;\n    h1$$1 = matchValue$$3[0].fields[3];\n    h2$$1 = matchValue$$3[1].fields[3];\n    k1$$4 = matchValue$$3[0].fields[0];\n    k2$$16 = matchValue$$3[1].fields[0];\n    t11$$2 = matchValue$$3[0].fields[1];\n    t12$$2 = matchValue$$3[0].fields[2];\n    t21$$1 = matchValue$$3[1].fields[1];\n    t22$$1 = matchValue$$3[1].fields[2];\n  }\n\n  switch ($target$$25) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7, acc$$4) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    switch (m$$7.tag) {\n      case 2:\n        {\n          const k$$15 = m$$7.fields[0];\n\n          if (SetTreeModule$$$mem(comparer$$12, k$$15, b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, k$$15, acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const r$$14 = m$$7.fields[2];\n          const l$$14 = m$$7.fields[1];\n          const k$$14 = m$$7.fields[0];\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, r$$14, acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, k$$14, b$$3) ? SetTreeModule$$$add(comparer$$12, k$$14, acc$$5) : acc$$5;\n          comparer$$12 = comparer$$12;\n          b$$3 = b$$3;\n          m$$7 = l$$14;\n          acc$$4 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($arg$$31, $arg$$32, $arg$$33, $arg$$34, $arg$$35) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $arg$$31,\n          f$$8 = $arg$$32,\n          s$$4 = $arg$$33,\n          acc_0 = $arg$$34,\n          acc_1 = $arg$$35;\n    const acc$$7 = [acc_0, acc_1];\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          const k$$18 = s$$4.fields[0];\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, k$$18, acc$$7[0], acc$$7[1]);\n        }\n\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      default:\n        {\n          const r$$15 = s$$4.fields[2];\n          const l$$15 = s$$4.fields[1];\n          const k$$17 = s$$4.fields[0];\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, r$$15, acc$$7[0], acc$$7[1]);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, k$$17, acc$$8[0], acc$$8[1]);\n          $arg$$31 = comparer$$15;\n          $arg$$32 = f$$8;\n          $arg$$33 = l$$15;\n          $arg$$34 = acc$$9[0];\n          $arg$$35 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        const k2$$19 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$19, new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        const r$$16 = s$$6.fields[2];\n        const l$$16 = s$$6.fields[1];\n        const k2$$18 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$18, l$$16, r$$16]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux(s$$7, n$$1) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    switch (s$$7.tag) {\n      case 2:\n        {\n          const k$$20 = s$$7.fields[0];\n          return k$$20;\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          const l$$17 = s$$7.fields[1];\n          const k$$19 = s$$7.fields[0];\n          s$$7 = l$$17;\n          n$$1 = k$$19;\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        const k$$22 = s$$8.fields[0];\n        return some(k$$22);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const l$$18 = s$$8.fields[1];\n        const k$$21 = s$$8.fields[0];\n        return some(SetTreeModule$$$minimumElementAux(l$$18, k$$21));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux(s$$9, n$$2) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    switch (s$$9.tag) {\n      case 2:\n        {\n          const k$$24 = s$$9.fields[0];\n          return k$$24;\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          const r$$17 = s$$9.fields[2];\n          const k$$23 = s$$9.fields[0];\n          s$$9 = r$$17;\n          n$$2 = k$$23;\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        const k$$26 = s$$10.fields[0];\n        return some(k$$26);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const r$$18 = s$$10.fields[2];\n        const k$$25 = s$$10.fields[0];\n        return some(SetTreeModule$$$maximumElementAux(r$$18, k$$25));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function SetTreeModule$002ESetIterator$00601(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$$$collapseLHS(stack) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        stack = L(stack.head.fields[1], L(SetTreeModule$$$SetOne(stack.head.fields[0]), L(stack.head.fields[2], stack.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        stack = stack.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return L();\n    }\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(L(s$$13, L())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function SetTreeModule$002EmkIEnumerator$00601(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this != null ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks(comparer$$17, l1, l2) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const matchValue$$8 = [l1, l2];\n    var $target$$39, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (matchValue$$8[0].tail != null) {\n      if (matchValue$$8[1].tail != null) {\n        if (matchValue$$8[1].head.tag === 2) {\n          if (matchValue$$8[0].head.tag === 2) {\n            $target$$39 = 4;\n            n1k = matchValue$$8[0].head.fields[0];\n            n2k = matchValue$$8[1].head.fields[0];\n            t1$$7 = matchValue$$8[0].tail;\n            t2$$7 = matchValue$$8[1].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            if (matchValue$$8[0].head.fields[1].tag === 0) {\n              $target$$39 = 6;\n              emp = matchValue$$8[0].head.fields[1];\n              n1k$$2 = matchValue$$8[0].head.fields[0];\n              n1r = matchValue$$8[0].head.fields[2];\n              n2k$$2 = matchValue$$8[1].head.fields[0];\n              t1$$9 = matchValue$$8[0].tail;\n              t2$$9 = matchValue$$8[1].tail;\n            } else {\n              $target$$39 = 9;\n              n1k$$5 = matchValue$$8[0].head.fields[0];\n              n1l = matchValue$$8[0].head.fields[1];\n              n1r$$2 = matchValue$$8[0].head.fields[2];\n              t1$$12 = matchValue$$8[0].tail;\n            }\n          } else {\n            $target$$39 = 10;\n            n2k$$4 = matchValue$$8[1].head.fields[0];\n            t2$$11 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[1].head.tag === 1) {\n          if (matchValue$$8[1].head.fields[1].tag === 0) {\n            if (matchValue$$8[0].head.tag === 2) {\n              $target$$39 = 5;\n              n1k$$1 = matchValue$$8[0].head.fields[0];\n              n2k$$1 = matchValue$$8[1].head.fields[0];\n              n2r = matchValue$$8[1].head.fields[2];\n              t1$$8 = matchValue$$8[0].tail;\n              t2$$8 = matchValue$$8[1].tail;\n            } else if (matchValue$$8[0].head.tag === 1) {\n              if (matchValue$$8[0].head.fields[1].tag === 0) {\n                $target$$39 = 7;\n                n1k$$3 = matchValue$$8[0].head.fields[0];\n                n1r$$1 = matchValue$$8[0].head.fields[2];\n                n2k$$3 = matchValue$$8[1].head.fields[0];\n                n2r$$1 = matchValue$$8[1].head.fields[2];\n                t1$$10 = matchValue$$8[0].tail;\n                t2$$10 = matchValue$$8[1].tail;\n              } else {\n                $target$$39 = 9;\n                n1k$$5 = matchValue$$8[0].head.fields[0];\n                n1l = matchValue$$8[0].head.fields[1];\n                n1r$$2 = matchValue$$8[0].head.fields[2];\n                t1$$12 = matchValue$$8[0].tail;\n              }\n            } else {\n              $target$$39 = 11;\n              n2k$$5 = matchValue$$8[1].head.fields[0];\n              n2l = matchValue$$8[1].head.fields[1];\n              n2r$$2 = matchValue$$8[1].head.fields[2];\n              t2$$12 = matchValue$$8[1].tail;\n            }\n          } else if (matchValue$$8[0].head.tag === 2) {\n            $target$$39 = 8;\n            n1k$$4 = matchValue$$8[0].head.fields[0];\n            t1$$11 = matchValue$$8[0].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            $target$$39 = 9;\n            n1k$$5 = matchValue$$8[0].head.fields[0];\n            n1l = matchValue$$8[0].head.fields[1];\n            n1r$$2 = matchValue$$8[0].head.fields[2];\n            t1$$12 = matchValue$$8[0].tail;\n          } else {\n            $target$$39 = 11;\n            n2k$$5 = matchValue$$8[1].head.fields[0];\n            n2l = matchValue$$8[1].head.fields[1];\n            n2r$$2 = matchValue$$8[1].head.fields[2];\n            t2$$12 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[0].head.tag === 2) {\n          $target$$39 = 8;\n          n1k$$4 = matchValue$$8[0].head.fields[0];\n          t1$$11 = matchValue$$8[0].tail;\n        } else if (matchValue$$8[0].head.tag === 1) {\n          $target$$39 = 9;\n          n1k$$5 = matchValue$$8[0].head.fields[0];\n          n1l = matchValue$$8[0].head.fields[1];\n          n1r$$2 = matchValue$$8[0].head.fields[2];\n          t1$$12 = matchValue$$8[0].tail;\n        } else {\n          $target$$39 = 3;\n          t1$$6 = matchValue$$8[0].tail;\n          t2$$6 = matchValue$$8[1].tail;\n        }\n      } else {\n        $target$$39 = 2;\n      }\n    } else if (matchValue$$8[1].tail != null) {\n      $target$$39 = 1;\n    } else {\n      $target$$39 = 0;\n    }\n\n    switch ($target$$39) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          comparer$$17 = comparer$$17;\n          l1 = t1$$6;\n          l2 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            comparer$$17 = comparer$$17;\n            l1 = t1$$7;\n            l2 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            comparer$$17 = comparer$$17;\n            l1 = L(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            l2 = L(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            comparer$$17 = comparer$$17;\n            l1 = L(n1r, t1$$9);\n            l2 = L(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            comparer$$17 = comparer$$17;\n            l1 = L(n1r$$1, t1$$10);\n            l2 = L(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          comparer$$17 = comparer$$17;\n          l1 = L(new SetTree$00601(0, \"SetEmpty\"), L(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          l2 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          comparer$$17 = comparer$$17;\n          l1 = L(n1l, L(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          l2 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          comparer$$17 = comparer$$17;\n          l1 = l1;\n          l2 = L(new SetTree$00601(0, \"SetEmpty\"), L(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          comparer$$17 = comparer$$17;\n          l1 = l1;\n          l2 = L(n2l, L(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  const matchValue$$9 = [s1, s2];\n\n  if (matchValue$$9[0].tag === 0) {\n    if (matchValue$$9[1].tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (matchValue$$9[1].tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, L(s1, L()), L(s2, L())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop(m$$8, acc$$10) {\n  SetTreeModule$$$loop: while (true) {\n    switch (m$$8.tag) {\n      case 2:\n        {\n          const k$$32 = m$$8.fields[0];\n          return L(k$$32, acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          const r$$20 = m$$8.fields[2];\n          const l$$20 = m$$8.fields[1];\n          const k$$31 = m$$8.fields[0];\n          m$$8 = l$$20;\n          acc$$10 = L(k$$31, SetTreeModule$$$loop(r$$20, acc$$10));\n          continue SetTreeModule$$$loop;\n        }\n    }\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, L());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator(comparer$$19, acc$$11, e) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const $var$$40 = comparer$$19;\n      acc$$11 = SetTreeModule$$$add(comparer$$19, e.Current, acc$$11);\n      e = e;\n      comparer$$19 = $var$$40;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    ie.Dispose();\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function FSharpSet(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this != null ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  if (FSharpSet$$get_Tree(s$$27).tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  if (FSharpSet$$get_Tree(s$$28).tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$38806891(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  if (FSharpSet$$get_Tree(a$$4).tag === 0) {\n    return a$$4;\n  } else if (FSharpSet$$get_Tree(b$$5).tag === 0) {\n    return a$$4;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  if (FSharpSet$$get_Tree(b$$6).tag === 0) {\n    return a$$5;\n  } else if (FSharpSet$$get_Tree(a$$5).tag === 0) {\n    return b$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  if (FSharpSet$$get_Tree(b$$7).tag === 0) {\n    return b$$7;\n  } else if (FSharpSet$$get_Tree(a$$6).tag === 0) {\n    return a$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  const this$ = this;\n  return \"set [\" + join(\"; \", ...map$$1(toString, this$)) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$22, y$$4) {\n    return (x$$22 << 1) + y$$4 + 631;\n  };\n\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    res = combineHash(res, structuralHash(e$$1.Current));\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$38806891(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source, comparer$$32) {\n  return createMutablePrivate(comparer$$32, SetTreeModule$$$ofSeq(comparer$$32, source));\n}\nexport function distinct(xs, comparer$$33) {\n  return createMutable(xs, comparer$$33);\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  const li$$1 = [];\n  const hashSet = createMutable(empty$$1(), comparer$$34);\n  iterate$$1(function (x$$37) {\n    if (hashSet.add_(projection(x$$37))) {\n      li$$1.push(x$$37);\n    }\n  }, xs$$1);\n  return li$$1;\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$38) {\n    return acc$$14.add(x$$38);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$39) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$39)) {\n      s1$$5.delete(x$$39);\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$40) {\n    s1$$6.delete(x$$40);\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$10, some } from \"./Option\";\nimport { compare, addToSet, tryGetValue, comparerFromEqualityComparer, max as max$$1, comparePrimitives } from \"./Util\";\nimport { createMutable } from \"./Map\";\nimport { iterate as iterate$$1 } from \"./Seq\";\nimport { createMutable as createMutable$$1 } from \"./Set\";\nimport { L } from \"./Types\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\" + \"\\\\nParameter name: \" + \"array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function mapping(x, i$$3) {\n      return f(i$$3, x);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function mapping$$1(x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    const len$$2 = matchValue | 0;\n    let acc = state;\n    const res = new cons$$7(len$$2);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    const len$$3 = matchValue$$1 | 0;\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(len$$3);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (ArrayBuffer.isView(arrays$$1[0])) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], comparerFromEqualityComparer(eq));\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n    }\n  }\n\n  const res$$2 = new Array(dict.size);\n  let i$$12 = 0;\n  iterate$$1(function (group) {\n    res$$2[i$$12] = [group[0], group[1]];\n    i$$12 = i$$12 + 1;\n  }, dict);\n  return res$$2;\n}\nexport function distinctBy(projection$$1, array$$16, eq$$1) {\n  const hashSet = createMutable$$1([], comparerFromEqualityComparer(eq$$1));\n  return filter(function predicate$$2($arg$$1) {\n    return addToSet(projection$$1($arg$$1), hashSet);\n  }, array$$16);\n}\nexport function distinct(array$$18, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$18, eq$$2);\n}\nexport function where(predicate$$3, array$$19) {\n  return array$$19.filter(predicate$$3);\n}\nexport function contains(value$$3, array$$21, eq$$3) {\n  const loop = function loop(i$$13) {\n    loop: while (true) {\n      if (i$$13 >= array$$21.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$3, array$$21[i$$13])) {\n        return true;\n      } else {\n        i$$13 = i$$13 + 1;\n        continue loop;\n      }\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$22, eq$$4) {\n  if (array$$22.length === 0) {\n    return array$$22;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, comparerFromEqualityComparer(eq$$4));\n    return array$$22.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$25, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], comparerFromEqualityComparer(eq$$5));\n\n  for (let idx$$3 = 0; idx$$3 <= array$$25.length - 1; idx$$3++) {\n    const v = array$$25[idx$$3];\n    const key$$1 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$4[0]) {\n      matchValue$$4[1].push(v);\n    } else {\n      const prev$$2 = [v];\n      dict$$1.set(key$$1, prev$$2);\n    }\n  }\n\n  const result$$5 = new Array(dict$$1.size);\n  let i$$14 = 0;\n  iterate$$1(function (group$$1) {\n    result$$5[i$$14] = [group$$1[0], cons$$11.from(group$$1[1])];\n    i$$14 = i$$14 + 1;\n  }, dict$$1);\n  return result$$5;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$5, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$5;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\" + \"\\\\nParameter name: \" + \"count\");\n  }\n\n  const result$$6 = new cons$$15(count$$8);\n\n  for (let i$$15 = 0; i$$15 <= count$$8 - 1; i$$15++) {\n    result$$6[i$$15] = initializer(i$$15);\n  }\n\n  return result$$6;\n}\nexport function pairwise(array$$27) {\n  if (array$$27.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$27.length - 1 | 0;\n    const result$$7 = new Array(count$$9);\n\n    for (let i$$16 = 0; i$$16 <= count$$9 - 1; i$$16++) {\n      result$$7[i$$16] = [array$$27[i$$16], array$$27[i$$16 + 1]];\n    }\n\n    return result$$7;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\" + \"\\\\nParameter name: \" + \"count\");\n  }\n\n  const result$$8 = new cons$$16(count$$10);\n\n  for (let i$$17 = 0; i$$17 <= result$$8.length - 1; i$$17++) {\n    result$$8[i$$17] = initial;\n  }\n\n  return result$$8;\n}\nexport function copy(array$$28, cons$$17) {\n  return array$$28.slice();\n}\nexport function reverse(array$$30, cons$$18) {\n  return array$$30.slice().reverse();\n}\nexport function scan(folder, state$$2, array$$34, cons$$19) {\n  const res$$3 = new cons$$19(array$$34.length + 1);\n  res$$3[0] = state$$2;\n\n  for (let i$$18 = 0; i$$18 <= array$$34.length - 1; i$$18++) {\n    res$$3[i$$18 + 1] = folder(res$$3[i$$18], array$$34[i$$18]);\n  }\n\n  return res$$3;\n}\nexport function scanBack(folder$$1, array$$35, state$$3, cons$$20) {\n  const res$$4 = new cons$$20(array$$35.length + 1);\n  res$$4[array$$35.length] = state$$3;\n\n  for (let i$$19 = array$$35.length - 1; i$$19 >= 0; i$$19--) {\n    res$$4[i$$19] = folder$$1(array$$35[i$$19], res$$4[i$$19 + 1]);\n  }\n\n  return res$$4;\n}\nexport function skip(count$$11, array$$36, cons$$21) {\n  if (count$$11 > array$$36.length) {\n    throw new Error(\"count is greater than array length\" + \"\\\\nParameter name: \" + \"count\");\n  }\n\n  if (count$$11 === array$$36.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$36.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$38, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$38.length ? predicate$$7(array$$38[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$38.length) {\n    return new cons$$23(0);\n  } else {\n    return array$$38.slice(count$$14);\n  }\n}\nexport function take(count$$16, array$$40, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\" + \"\\\\nParameter name: \" + \"count\");\n  }\n\n  if (count$$16 > array$$40.length) {\n    throw new Error(\"count is greater than array length\" + \"\\\\nParameter name: \" + \"count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$40.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$42, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$42.length ? predicate$$8(array$$42[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    return array$$42.slice(0, 0 + count$$18);\n  }\n}\nexport function addRangeInPlace(range, array$$44) {\n  const iter = range[Symbol.iterator]();\n  let cur = iter.next();\n\n  while (!cur.done) {\n    array$$44.push(cur.value);\n    cur = iter.next();\n  }\n}\nexport function removeInPlace(item$$3, array$$46) {\n  const i$$20 = array$$46.indexOf(item$$3);\n\n  if (i$$20 > -1) {\n    array$$46.splice(i$$20, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function copyTo(source$$3, sourceIndex, target$$4, targetIndex$$1, count$$20) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$21 = sourceIndex; i$$21 <= sourceIndex + count$$20 - 1; i$$21++) {\n    target$$4[i$$21 + diff] = source$$3[i$$21];\n  }\n}\nexport function partition(f$$6, source$$4, cons$$29) {\n  const len$$9 = source$$4.length | 0;\n  const res1 = new cons$$29(len$$9);\n  const res2 = new cons$$29(len$$9);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$22 = 0; i$$22 <= len$$9 - 1; i$$22++) {\n    if (f$$6(source$$4[i$$22])) {\n      res1[iTrue] = source$$4[i$$22];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$4[i$$22];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [res1, res2];\n}\nexport function find(predicate$$9, array$$49) {\n  const matchValue$$5 = array$$49.find(predicate$$9);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$5 = value$$10(matchValue$$5);\n    return res$$5;\n  }\n}\nexport function tryFind(predicate$$11, array$$51) {\n  return array$$51.find(predicate$$11);\n}\nexport function findIndex(predicate$$13, array$$53) {\n  var index;\n  const matchValue$$6 = array$$53.findIndex(predicate$$13);\n\n  if (index = matchValue$$6 | 0, index > -1) {\n    const index$$1 = matchValue$$6 | 0;\n    return index$$1 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$15, array$$55) {\n  var index$$2;\n  const matchValue$$7 = array$$55.findIndex(predicate$$15);\n\n  if (index$$2 = matchValue$$7 | 0, index$$2 > -1) {\n    const index$$3 = matchValue$$7 | 0;\n    return index$$3;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$57) {\n  const loop$$1 = function loop$$1(i$$23) {\n    loop$$1: while (true) {\n      if (i$$23 >= array$$57.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$57[i$$23]);\n\n        if (matchValue$$8 != null) {\n          const res$$6 = value$$10(matchValue$$8);\n          return res$$6;\n        } else {\n          i$$23 = i$$23 + 1;\n          continue loop$$1;\n        }\n      }\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$58) {\n  const loop$$2 = function loop$$2(i$$24) {\n    loop$$2: while (true) {\n      if (i$$24 >= array$$58.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$58[i$$24]);\n\n        if (matchValue$$9 == null) {\n          i$$24 = i$$24 + 1;\n          continue loop$$2;\n        } else {\n          const res$$7 = matchValue$$9;\n          return res$$7;\n        }\n      }\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$17, array$$59) {\n  const loop$$3 = function loop$$3(i$$25) {\n    loop$$3: while (true) {\n      if (i$$25 < 0) {\n        return indexNotFound();\n      } else if (predicate$$17(array$$59[i$$25])) {\n        return array$$59[i$$25];\n      } else {\n        i$$25 = i$$25 - 1;\n        continue loop$$3;\n      }\n    }\n  };\n\n  return loop$$3(array$$59.length - 1);\n}\nexport function tryFindBack(predicate$$18, array$$60) {\n  const loop$$4 = function loop$$4(i$$26) {\n    loop$$4: while (true) {\n      if (i$$26 < 0) {\n        return null;\n      } else if (predicate$$18(array$$60[i$$26])) {\n        return some(array$$60[i$$26]);\n      } else {\n        i$$26 = i$$26 - 1;\n        continue loop$$4;\n      }\n    }\n  };\n\n  return loop$$4(array$$60.length - 1);\n}\nexport function findIndexBack(predicate$$19, array$$61) {\n  const loop$$5 = function loop$$5(i$$27) {\n    loop$$5: while (true) {\n      if (i$$27 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$19(array$$61[i$$27])) {\n        return i$$27 | 0;\n      } else {\n        i$$27 = i$$27 - 1;\n        continue loop$$5;\n      }\n    }\n  };\n\n  return loop$$5(array$$61.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$20, array$$62) {\n  const loop$$6 = function loop$$6(i$$28) {\n    loop$$6: while (true) {\n      if (i$$28 < 0) {\n        return null;\n      } else if (predicate$$20(array$$62[i$$28])) {\n        return i$$28;\n      } else {\n        i$$28 = i$$28 - 1;\n        continue loop$$6;\n      }\n    }\n  };\n\n  return loop$$6(array$$62.length - 1);\n}\nexport function choose(f$$7, source$$5, cons$$30) {\n  const res$$8 = new cons$$30(0);\n  let j$$1 = 0;\n\n  for (let i$$29 = 0; i$$29 <= source$$5.length - 1; i$$29++) {\n    const matchValue$$10 = f$$7(source$$5[i$$29]);\n\n    if (matchValue$$10 == null) {} else {\n      const y = value$$10(matchValue$$10);\n      res$$8[j$$1] = y;\n      j$$1 = j$$1 + 1;\n    }\n  }\n\n  return res$$8;\n}\nexport function foldIndexed(folder$$2, state$$4, array$$63) {\n  return array$$63.reduce(function folder$$3(acc$$2, x$$3, i$$30) {\n    return folder$$2(i$$30, acc$$2, x$$3);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$65) {\n  return array$$65.reduce(folder$$4, state$$6);\n}\nexport function iterate(action, array$$67) {\n  for (let i$$31 = 0; i$$31 <= array$$67.length - 1; i$$31++) {\n    action(array$$67[i$$31]);\n  }\n}\nexport function iterateIndexed(action$$1, array$$68) {\n  for (let i$$32 = 0; i$$32 <= array$$68.length - 1; i$$32++) {\n    action$$1(i$$32, array$$68[i$$32]);\n  }\n}\nexport function iterate2(action$$2, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$33 = 0; i$$33 <= array1$$2.length - 1; i$$33++) {\n    action$$2(array1$$2[i$$33], array2$$2[i$$33]);\n  }\n}\nexport function iterateIndexed2(action$$3, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$34 = 0; i$$34 <= array1$$3.length - 1; i$$34++) {\n    action$$3(i$$34, array1$$3[i$$34], array2$$3[i$$34]);\n  }\n}\nexport function isEmpty(array$$69) {\n  return array$$69.length === 0;\n}\nexport function forAll(predicate$$21, array$$70) {\n  return array$$70.every(predicate$$21);\n}\nexport function permute(f$$8, array$$72) {\n  const size = array$$72.length | 0;\n  const res$$9 = new array$$72.constructor(array$$72.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$35, x$$5) {\n    const j$$2 = f$$8(i$$35) | 0;\n\n    if (j$$2 < 0 ? true : j$$2 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$9[j$$2] = x$$5;\n    checkFlags[j$$2] = 1;\n  }, array$$72);\n  const isValid = forAll(function (y$$1) {\n    return 1 === y$$1;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$9;\n}\nexport function setSlice(target$$5, lower, upper, source$$6) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$6.length <= length : false) {\n    return target$$5.set(source$$6, lower$$1);\n  } else {\n    for (let i$$36 = 0; i$$36 <= length; i$$36++) {\n      target$$5[i$$36 + lower$$1] = source$$6[i$$36];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$7, y$$2) {\n    return comparer.Compare(projection$$3(x$$7), projection$$3(y$$2));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$8, y$$3) {\n    return comparer$$1.Compare(x$$8, y$$3);\n  });\n}\n\nfunction copyArray(array$$73) {\n  const result$$9 = new array$$73.constructor(array$$73.length);\n\n  for (let i$$37 = 0; i$$37 <= array$$73.length - 1; i$$37++) {\n    result$$9[i$$37] = array$$73[i$$37];\n  }\n\n  return result$$9;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function comparer$$3(x$$9, y$$4) {\n    return comparer$$2.Compare(x$$9, y$$4);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function comparer$$5(x$$10, y$$5) {\n    return comparer$$4.Compare(projection$$4(x$$10), projection$$4(y$$5));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function comparer$$7(x$$11, y$$6) {\n    return comparer$$6.Compare(x$$11, y$$6) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function comparer$$9(x$$12, y$$7) {\n    return comparer$$8.Compare(projection$$5(x$$12), projection$$5(y$$7)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$10 = [];\n\n  const loop$$7 = function loop$$7(state$$9) {\n    const matchValue$$11 = generator(state$$9);\n\n    if (matchValue$$11 != null) {\n      const x$$13 = matchValue$$11[0];\n      const s$0027$$2 = matchValue$$11[1];\n      res$$10.push(x$$13);\n      loop$$7(s$0027$$2);\n    }\n  };\n\n  loop$$7(state$$8);\n  return res$$10;\n}\nexport function unzip(array$$75) {\n  const len$$11 = array$$75.length | 0;\n  const res1$$1 = new Array(len$$11);\n  const res2$$1 = new Array(len$$11);\n  iterateIndexed(function (i$$38, tupledArg) {\n    res1$$1[i$$38] = tupledArg[0];\n    res2$$1[i$$38] = tupledArg[1];\n  }, array$$75);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$76) {\n  const len$$14 = array$$76.length | 0;\n  const res1$$2 = new Array(len$$14);\n  const res2$$2 = new Array(len$$14);\n  const res3 = new Array(len$$14);\n  iterateIndexed(function (i$$39, tupledArg$$1) {\n    res1$$2[i$$39] = tupledArg$$1[0];\n    res2$$2[i$$39] = tupledArg$$1[1];\n    res3[i$$39] = tupledArg$$1[2];\n  }, array$$76);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$10 = new Array(array1$$4.length);\n\n  for (let i$$40 = 0; i$$40 <= array1$$4.length - 1; i$$40++) {\n    result$$10[i$$40] = [array1$$4[i$$40], array2$$4[i$$40]];\n  }\n\n  return result$$10;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$11 = new Array(array1$$5.length);\n\n  for (let i$$41 = 0; i$$41 <= array1$$5.length - 1; i$$41++) {\n    result$$11[i$$41] = [array1$$5[i$$41], array2$$5[i$$41], array3[i$$41]];\n  }\n\n  return result$$11;\n}\nexport function chunkBySize(chunkSize, array$$77) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\" + \"\\\\nParameter name: \" + \"size\");\n  }\n\n  if (array$$77.length === 0) {\n    return [[]];\n  } else {\n    const result$$12 = [];\n\n    for (let x$$14 = 0; x$$14 <= ~~Math.ceil(array$$77.length / chunkSize) - 1; x$$14++) {\n      const start$$7 = x$$14 * chunkSize | 0;\n      const slice = array$$77.slice(start$$7, start$$7 + chunkSize);\n      result$$12.push(slice);\n    }\n\n    return result$$12;\n  }\n}\nexport function splitAt(index$$4, array$$80) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\" + \"\\\\nParameter name: \" + \"index\");\n  }\n\n  if (index$$4 > array$$80.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\" + \"\\\\nParameter name: \" + \"index\");\n  }\n\n  return [array$$80.slice(0, 0 + index$$4), array$$80.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$42 = 0;\n    let result$$13 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$42 < length1 ? result$$13 === 0 : false) {\n        result$$13 = comparer$$12(array1$$6[i$$42], array2$$6[i$$42]);\n        i$$42 = i$$42 + 1;\n      }\n\n      return result$$13 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$83) {\n  if (array$$83.length === 1) {\n    return array$$83[0];\n  } else if (array$$83.length === 0) {\n    throw new Error(\"The input sequence was empty\" + \"\\\\nParameter name: \" + \"array\");\n  } else {\n    throw new Error(\"Input array too long\" + \"\\\\nParameter name: \" + \"array\");\n  }\n}\nexport function head(array$$84) {\n  if (array$$84.length === 0) {\n    throw new Error(\"The input array was empty\" + \"\\\\nParameter name: \" + \"array\");\n  } else {\n    return array$$84[0];\n  }\n}\nexport function tryHead(array$$85) {\n  if (array$$85.length === 0) {\n    return null;\n  } else {\n    return some(array$$85[0]);\n  }\n}\nexport function tail(array$$86) {\n  if (array$$86.length === 0) {\n    throw new Error(\"Not enough elements\" + \"\\\\nParameter name: \" + \"array\");\n  }\n\n  return array$$86.slice(1);\n}\nexport function item(index$$5, array$$88) {\n  return array$$88[index$$5];\n}\nexport function tryItem(index$$6, array$$89) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$89.length) {\n    return null;\n  } else {\n    return some(array$$89[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$90, state$$10) {\n  return array$$90.reduceRight(function folder$$7(acc$$4, x$$15, i$$43) {\n    return folder$$6(i$$43, x$$15, acc$$4);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$92, state$$12) {\n  return array$$92.reduceRight(function folder$$9(acc$$5, x$$16) {\n    return folder$$8(x$$16, acc$$5);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$44 = 0; i$$44 <= array1$$8.length - 1; i$$44++) {\n    acc$$6 = folder$$10(i$$44, acc$$6, array1$$8[i$$44], array2$$8[i$$44]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$17, y$$8) {\n    return folder$$11(acc$$7, x$$17, y$$8);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$45 = 1; i$$45 <= size$$1; i$$45++) {\n    acc$$8 = folder$$12(i$$45 - 1, array1$$10[size$$1 - i$$45], array2$$10[size$$1 - i$$45], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$18, y$$9, acc$$9) {\n    return f$$9(x$$18, y$$9, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$94) {\n  if (array$$94.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$94.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$96) {\n  if (array$$96.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$96.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$23, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$19, y$$10) {\n    return acc$$10 ? predicate$$23(x$$19, y$$10) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($arg$$162, $arg$$163, $arg$$164) {\n  existsOffset: while (true) {\n    const predicate$$24 = $arg$$162,\n          array$$98 = $arg$$163,\n          index$$7 = $arg$$164;\n\n    if (index$$7 === array$$98.length) {\n      return false;\n    } else if (predicate$$24(array$$98[index$$7])) {\n      return true;\n    } else {\n      $arg$$162 = predicate$$24;\n      $arg$$163 = array$$98;\n      $arg$$164 = index$$7 + 1;\n      continue existsOffset;\n    }\n  }\n}\nexport function exists(predicate$$25, array$$99) {\n  return existsOffset(predicate$$25, array$$99, 0);\n}\nexport function existsOffset2($arg$$167, $arg$$168, $arg$$169, $arg$$170) {\n  existsOffset2: while (true) {\n    const predicate$$26 = $arg$$167,\n          array1$$13 = $arg$$168,\n          array2$$13 = $arg$$169,\n          index$$8 = $arg$$170;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$26(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $arg$$167 = predicate$$26;\n      $arg$$168 = array1$$13;\n      $arg$$169 = array2$$13;\n      $arg$$170 = index$$8 + 1;\n      continue existsOffset2;\n    }\n  }\n}\nexport function exists2(predicate$$27, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$27, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$100) {\n  let acc$$11 = 0;\n\n  for (let i$$46 = 0; i$$46 <= array$$100.length - 1; i$$46++) {\n    acc$$11 = acc$$11 + array$$100[i$$46];\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$101) {\n  let acc$$12 = 0;\n\n  for (let i$$47 = 0; i$$47 <= array$$101.length - 1; i$$47++) {\n    acc$$12 = acc$$12 + projection$$6(array$$101[i$$47]);\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$20, y$$11) {\n    return comparer$$14.Compare(projection$$7(y$$11), projection$$7(x$$20)) > 0 ? y$$11 : x$$20;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$21, y$$12) {\n    return comparer$$15.Compare(y$$12, x$$21) > 0 ? y$$12 : x$$21;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$22, y$$13) {\n    return comparer$$16.Compare(projection$$8(y$$13), projection$$8(x$$22)) > 0 ? x$$22 : y$$13;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$23, y$$14) {\n    return comparer$$17.Compare(y$$14, x$$23) > 0 ? x$$23 : y$$14;\n  }, xs$$15);\n}\nexport function average(array$$102) {\n  if (array$$102.length === 0) {\n    throw new Error(\"The input array was empty\" + \"\\\\nParameter name: \" + \"array\");\n  }\n\n  const total = sum(array$$102);\n  return total / array$$102.length;\n}\nexport function averageBy(projection$$9, array$$103) {\n  if (array$$103.length === 0) {\n    throw new Error(\"The input array was empty\" + \"\\\\nParameter name: \" + \"array\");\n  }\n\n  const total$$1 = sumBy(projection$$9, array$$103);\n  return total$$1 / array$$103.length;\n}\nexport function ofSeq(source$$8, cons$$31) {\n  return cons$$31.from(source$$8);\n}\nexport function ofList(source$$9, cons$$32) {\n  return cons$$32.from(source$$9);\n}\nexport function toList(source$$10) {\n  const len$$20 = source$$10.length | 0;\n  let target$$7 = L();\n\n  for (let i$$48 = len$$20 - 1; i$$48 >= 0; i$$48--) {\n    target$$7 = L(source$$10[i$$48], target$$7);\n  }\n\n  return target$$7;\n}","module Board\r\n#if FABLE_COMPILER\r\nopen Fable.Core\r\n\r\n[<StringEnum>]\r\n#endif\r\ntype WordDirection = Down | Right | Left | Up | RightUp | RightDown | LeftUp | LeftDown\r\n\r\ntype LetterGrid = char[][]\r\n\r\nlet createLetterGrid (width:int) (height:int) (value:char): LetterGrid = \r\n    seq { 1..height } |> Seq.map (fun _ -> Array.create width value) |> Array.ofSeq\r\n\r\nlet copyLetterGrid (grid:LetterGrid): LetterGrid =\r\n    grid |> Array.map (fun r -> Array.copy r )\r\n\r\ntype BoardPosition = \r\n    { Row: int\r\n      Col: int }\r\n\r\nlet addOffset (offset: int) (direction: WordDirection) (pos: BoardPosition): BoardPosition = \r\n  match direction with\r\n      | Down -> { pos with Row = (pos.Row + offset) }\r\n      | Up -> { pos with Row = (pos.Row - offset) }\r\n      | Right -> { pos with Col = (pos.Col + offset) }\r\n      | Left -> { pos with Col = (pos.Col - offset) }\r\n      | RightUp -> { pos with Col = (pos.Col + offset); Row = (pos.Row - offset) }\r\n      | LeftUp -> { pos with Col = (pos.Col - offset); Row = (pos.Row - offset) }\r\n      | RightDown -> { pos with Col = (pos.Col + offset); Row = (pos.Row + offset) }\r\n      | LeftDown -> { pos with Col = (pos.Col - offset); Row = (pos.Row + offset) }\r\n\r\n\r\ntype BoardWord = \r\n    { Position: BoardPosition\r\n      Direction: WordDirection\r\n      Word: string }\r\n\r\ntype Board = \r\n    { Words: BoardWord list\r\n      Rows: int\r\n      Cols: int\r\n      Letters: LetterGrid }\r\n\r\nlet createBoard (width: int) (height: int): Board =\r\n    {   \r\n        Words = []\r\n        Rows = height\r\n        Cols = width\r\n        Letters = createLetterGrid width height '*'\r\n    }\r\n\r\nlet walkDirection (start: BoardPosition) (dir: WordDirection) (length: int): seq<BoardPosition> =\r\n    seq {\r\n        for offset in 0..(length-1) do\r\n            yield addOffset offset dir start\r\n    }\r\n\r\nlet walkBoard (start: BoardPosition) (dir: WordDirection) (length: int) (board: Board): seq<char> = \r\n    walkDirection start dir length |> Seq.map (fun pos -> board.Letters.[pos.Row].[pos.Col])\r\n\r\nlet addWordToBoard (word: BoardWord) (board: Board) : Board =\r\n    let newLetters = copyLetterGrid board.Letters \r\n    walkDirection word.Position word.Direction word.Word.Length\r\n        |> Seq.iteri (fun off pos -> newLetters.[pos.Row].[pos.Col] <- word.Word.[off] )\r\n    {\r\n        board with\r\n            Words = word::board.Words\r\n            Letters = newLetters\r\n    }","import { defaultArg, value as value$$1, some } from \"./Option\";\nimport { FSharpRef, L } from \"./Types\";\nimport { iterate as iterate$$1, collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq\";\nimport { permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1, foldBack as foldBack$$1 } from \"./Array\";\nimport { ofList } from \"./Array\";\nimport { tryGetValue, addToSet, comparerFromEqualityComparer } from \"./Util\";\nimport { createMutable } from \"./Set\";\nimport { createMutable as createMutable$$1 } from \"./Map\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    const x = _arg1.head;\n    return x;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    const x$$1 = _arg1$$1.head;\n    return some(x$$1);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    const xs = _arg1$$2.tail;\n    return xs;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last(_arg1$$3) {\n  last: while (true) {\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        _arg1$$3 = _arg1$$3.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n  }\n}\nexport function tryLast(_arg1$$4) {\n  tryLast: while (true) {\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        _arg1$$4 = _arg1$$4.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop(xs$$4, ys$$1) {\n      loop: while (true) {\n        const matchValue = [xs$$4, ys$$1];\n\n        if (matchValue[0].tail != null) {\n          if (matchValue[1].tail != null) {\n            const matchValue$$1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n\n            if (matchValue$$1 === 0) {\n              xs$$4 = matchValue[0].tail;\n              ys$$1 = matchValue[1].tail;\n              continue loop;\n            } else {\n              const res = matchValue$$1 | 0;\n              return res | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (matchValue[1].tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function equalsWith(comparer$$1, xs$$6, ys$$3) {\n  return compareWith(comparer$$1, xs$$6, ys$$3) === 0;\n}\nexport function foldIndexedAux($arg$$8, $arg$$9, $arg$$10, $arg$$11) {\n  foldIndexedAux: while (true) {\n    const f = $arg$$8,\n          i = $arg$$9,\n          acc = $arg$$10,\n          _arg1$$5 = $arg$$11;\n\n    if (_arg1$$5.tail != null) {\n      const xs$$7 = _arg1$$5.tail;\n      const x$$5 = _arg1$$5.head;\n      $arg$$8 = f;\n      $arg$$9 = i + 1;\n      $arg$$10 = f(i, acc, x$$5);\n      $arg$$11 = xs$$7;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$8) {\n  return foldIndexedAux(f$$1, 0, state, xs$$8);\n}\nexport function fold($arg$$15, $arg$$16, $arg$$17) {\n  fold: while (true) {\n    const f$$2 = $arg$$15,\n          state$$1 = $arg$$16,\n          xs$$9 = $arg$$17;\n\n    if (xs$$9.tail != null) {\n      const t = xs$$9.tail;\n      const h = xs$$9.head;\n      $arg$$15 = f$$2;\n      $arg$$16 = f$$2(state$$1, h);\n      $arg$$17 = t;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n  }\n}\nexport function reverse(xs$$10) {\n  return fold(function (acc$$1, x$$6) {\n    return L(x$$6, acc$$1);\n  }, L(), xs$$10);\n}\nexport function foldBack(f$$3, xs$$11, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$11));\n}\nexport function toSeq(xs$$12) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$12);\n}\nexport function ofSeq(xs$$13) {\n  return reverse(fold$$1(function (acc$$3, x$$9) {\n    return L(x$$9, acc$$3);\n  }, L(), xs$$13));\n}\nexport function concat(lists) {\n  return reverse(fold$$1(function (state$$3, xs$$15) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return L(x$$10, acc$$4);\n    }, state$$3, xs$$15);\n  }, L(), lists));\n}\nexport function foldIndexed2Aux($arg$$21, $arg$$22, $arg$$23, $arg$$24, $arg$$25) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $arg$$21,\n          i$$1 = $arg$$22,\n          acc$$5 = $arg$$23,\n          bs = $arg$$24,\n          cs = $arg$$25;\n    const matchValue$$2 = [bs, cs];\n    var $target$$26, x$$11, xs$$17, y$$1, ys$$4;\n\n    if (matchValue$$2[0].tail != null) {\n      if (matchValue$$2[1].tail != null) {\n        $target$$26 = 1;\n        x$$11 = matchValue$$2[0].head;\n        xs$$17 = matchValue$$2[0].tail;\n        y$$1 = matchValue$$2[1].head;\n        ys$$4 = matchValue$$2[1].tail;\n      } else {\n        $target$$26 = 2;\n      }\n    } else if (matchValue$$2[1].tail == null) {\n      $target$$26 = 0;\n    } else {\n      $target$$26 = 2;\n    }\n\n    switch ($target$$26) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $arg$$21 = f$$5;\n          $arg$$22 = i$$1 + 1;\n          $arg$$23 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $arg$$24 = xs$$17;\n          $arg$$25 = ys$$4;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$18, ys$$5) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$18, ys$$5);\n}\nexport function fold2(f$$7, state$$5, xs$$19, ys$$6) {\n  return fold2$$1(f$$7, state$$5, xs$$19, ys$$6);\n}\nexport function foldBack2(f$$8, xs$$20, ys$$7, state$$6) {\n  return foldBack2$$1(f$$8, xs$$20, ys$$7, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner(acc$$6, state$$8) {\n    unfoldInner: while (true) {\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        acc$$6 = L(x$$12, acc$$6);\n        state$$8 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n    }\n  };\n\n  return unfoldInner(L(), state$$7);\n}\nexport function foldIndexed3Aux($arg$$41, $arg$$42, $arg$$43, $arg$$44, $arg$$45, $arg$$46) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $arg$$41,\n          i$$2 = $arg$$42,\n          acc$$7 = $arg$$43,\n          bs$$1 = $arg$$44,\n          cs$$1 = $arg$$45,\n          ds = $arg$$46;\n    const matchValue$$4 = [bs$$1, cs$$1, ds];\n    var $target$$47, x$$13, xs$$21, y$$2, ys$$8, z, zs;\n\n    if (matchValue$$4[0].tail != null) {\n      if (matchValue$$4[1].tail != null) {\n        if (matchValue$$4[2].tail != null) {\n          $target$$47 = 1;\n          x$$13 = matchValue$$4[0].head;\n          xs$$21 = matchValue$$4[0].tail;\n          y$$2 = matchValue$$4[1].head;\n          ys$$8 = matchValue$$4[1].tail;\n          z = matchValue$$4[2].head;\n          zs = matchValue$$4[2].tail;\n        } else {\n          $target$$47 = 2;\n        }\n      } else {\n        $target$$47 = 2;\n      }\n    } else if (matchValue$$4[1].tail == null) {\n      if (matchValue$$4[2].tail == null) {\n        $target$$47 = 0;\n      } else {\n        $target$$47 = 2;\n      }\n    } else {\n      $target$$47 = 2;\n    }\n\n    switch ($target$$47) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $arg$$41 = f$$10;\n          $arg$$42 = i$$2 + 1;\n          $arg$$43 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $arg$$44 = xs$$21;\n          $arg$$45 = ys$$8;\n          $arg$$46 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$22, ys$$9, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$22, ys$$9, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$23, ys$$10, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$23, ys$$10, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$24) {\n  return ofSeq(scan$$1(f$$13, state$$11, xs$$24));\n}\nexport function scanBack(f$$14, xs$$26, state$$12) {\n  return ofSeq(scanBack$$1(f$$14, xs$$26, state$$12));\n}\nexport function length(xs$$28) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$28);\n}\nexport function append(xs$$29, ys$$11) {\n  return fold(function (acc$$10, x$$15) {\n    return L(x$$15, acc$$10);\n  }, ys$$11, reverse(xs$$29));\n}\nexport function collect(f$$15, xs$$30) {\n  return ofSeq(collect$$1(f$$15, xs$$30));\n}\nexport function map(f$$16, xs$$32) {\n  return reverse(fold(function (acc$$11, x$$16) {\n    return L(f$$16(x$$16), acc$$11);\n  }, L(), xs$$32));\n}\nexport function mapIndexed(f$$17, xs$$34) {\n  return reverse(foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return L(f$$17(i$$3, x$$17), acc$$12);\n  }, L(), xs$$34));\n}\nexport function indexed(xs$$36) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$36);\n}\nexport function map2(f$$18, xs$$37, ys$$12) {\n  return reverse(fold2(function (acc$$13, x$$19, y$$4) {\n    return L(f$$18(x$$19, y$$4), acc$$13);\n  }, L(), xs$$37, ys$$12));\n}\nexport function mapIndexed2(f$$19, xs$$39, ys$$13) {\n  return reverse(foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return L(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, L(), xs$$39, ys$$13));\n}\nexport function map3(f$$20, xs$$41, ys$$14, zs$$3) {\n  return reverse(fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return L(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, L(), xs$$41, ys$$14, zs$$3));\n}\nexport function mapIndexed3(f$$21, xs$$43, ys$$15, zs$$4) {\n  return reverse(foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return L(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, L(), xs$$43, ys$$15, zs$$4));\n}\nexport function mapFold(f$$22, s, xs$$45) {\n  const foldFn = function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [L(patternInput[0], tupledArg[0]), patternInput[1]];\n  };\n\n  const patternInput$$1 = fold(foldFn, [L(), s], xs$$45);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$46, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$46));\n}\nexport function iterate(f$$24, xs$$47) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$47);\n}\nexport function iterate2(f$$25, xs$$48, ys$$16) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$48, ys$$16);\n}\nexport function iterateIndexed(f$$26, xs$$49) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$49);\n}\nexport function iterateIndexed2(f$$27, xs$$50, ys$$17) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$50, ys$$17);\n}\nexport function ofArray(xs$$51) {\n  return foldBack$$1(function (x$$28, acc$$17) {\n    return L(x$$28, acc$$17);\n  }, xs$$51, L());\n}\nexport function empty() {\n  return L();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($arg$$100, $arg$$101, $arg$$102) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $arg$$100,\n          i$$9 = $arg$$101,\n          _arg1$$9 = $arg$$102;\n\n    if (_arg1$$9.tail != null) {\n      const xs$$52 = _arg1$$9.tail;\n      const x$$29 = _arg1$$9.head;\n      const result = f$$28(i$$9, x$$29);\n\n      if (result == null) {\n        $arg$$100 = f$$28;\n        $arg$$101 = i$$9 + 1;\n        $arg$$102 = xs$$52;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$53) {\n  return tryPickIndexedAux(f$$29, 0, xs$$53);\n}\nexport function tryPick(f$$30, xs$$54) {\n  return tryPickIndexed(function (_arg1$$10, x$$30) {\n    return f$$30(x$$30);\n  }, xs$$54);\n}\nexport function pick(f$$31, xs$$55) {\n  const matchValue$$5 = tryPick(f$$31, xs$$55);\n\n  if (matchValue$$5 != null) {\n    const x$$31 = value$$1(matchValue$$5);\n    return x$$31;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$56) {\n  return tryPickIndexed(function (i$$10, x$$32) {\n    return f$$32(i$$10, x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function tryFind(f$$33, xs$$57) {\n  return tryPickIndexed(function (_arg1$$11, x$$33) {\n    return f$$33(x$$33) ? some(x$$33) : null;\n  }, xs$$57);\n}\nexport function findIndexed(f$$34, xs$$58) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$58);\n\n  if (matchValue$$6 != null) {\n    const x$$34 = value$$1(matchValue$$6);\n    return x$$34;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$59) {\n  return findIndexed(function (_arg1$$12, x$$35) {\n    return f$$35(x$$35);\n  }, xs$$59);\n}\nexport function findBack(f$$36, xs$$60) {\n  return find(f$$36, reverse(xs$$60));\n}\nexport function tryFindBack(f$$37, xs$$63) {\n  return tryFind(f$$37, reverse(xs$$63));\n}\nexport function tryFindIndex(f$$38, xs$$66) {\n  return tryPickIndexed(function (i$$11, x$$36) {\n    return f$$38(x$$36) ? i$$11 : null;\n  }, xs$$66);\n}\nexport function tryFindIndexBack(f$$39, xs$$67) {\n  return tryFindIndexBack$$1(f$$39, ofList(xs$$67, Array));\n}\nexport function findIndex(f$$40, xs$$68) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$68);\n\n  if (matchValue$$7 != null) {\n    const x$$37 = matchValue$$7 | 0;\n    return x$$37 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$69) {\n  return findIndexBack$$1(f$$41, ofList(xs$$69, Array));\n}\nexport function item(n, xs$$70) {\n  return findIndexed(function (i$$12, _arg1$$13) {\n    return n === i$$12;\n  }, xs$$70);\n}\nexport function tryItem(n$$1, xs$$71) {\n  return tryFindIndexed(function (i$$13, _arg1$$14) {\n    return n$$1 === i$$13;\n  }, xs$$71);\n}\nexport function filter(f$$42, xs$$72) {\n  return foldBack(function (x$$38, acc$$18) {\n    return f$$42(x$$38) ? L(x$$38, acc$$18) : acc$$18;\n  }, xs$$72, L());\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$39) {\n    return f$$43(x$$39) ? [L(x$$39, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], L(x$$39, tupledArg$$1[1])];\n  }, [L(), L()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  return reverse(fold(function (acc$$19, x$$40) {\n    const matchValue$$8 = f$$44(x$$40);\n\n    if (matchValue$$8 == null) {\n      return acc$$19;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return L(y$$10, acc$$19);\n    }\n  }, L(), xs$$74));\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1(xs$$76) {\n    loop$$1: while (true) {\n      if (xs$$76.tail != null) {\n        const v$$1 = xs$$76.head;\n        const rest = xs$$76.tail;\n\n        if (eq.Equals(value, v$$1)) {\n          return true;\n        } else {\n          xs$$76 = rest;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, comparerFromEqualityComparer(eq$$1));\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = L();\n\n  for (let i$$14 = 1; i$$14 <= n$$2; i$$14++) {\n    xs$$78 = L(f$$46(n$$2 - i$$14), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$41) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$41;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    const t$$1 = _arg1$$16.tail;\n    const h$$1 = _arg1$$16.head;\n    return fold(f$$47, h$$1, t$$1);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    const t$$2 = _arg1$$17.tail;\n    const h$$2 = _arg1$$17.head;\n    return foldBack(f$$48, t$$2, h$$2);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$20, x$$42) {\n    return acc$$20 ? f$$49(x$$42) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$18) {\n  return fold2(function (acc$$21, x$$43, y$$11) {\n    return acc$$21 ? f$$50(x$$43, y$$11) : false;\n  }, true, xs$$80, ys$$18);\n}\nexport function exists($arg$$146, $arg$$147) {\n  exists: while (true) {\n    const f$$51 = $arg$$146,\n          _arg1$$18 = $arg$$147;\n\n    if (_arg1$$18.tail != null) {\n      const xs$$81 = _arg1$$18.tail;\n      const x$$44 = _arg1$$18.head;\n\n      if (f$$51(x$$44)) {\n        return true;\n      } else {\n        $arg$$146 = f$$51;\n        $arg$$147 = xs$$81;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n  }\n}\nexport function exists2($arg$$148, $arg$$149, $arg$$150) {\n  exists2: while (true) {\n    const f$$52 = $arg$$148,\n          bs$$2 = $arg$$149,\n          cs$$2 = $arg$$150;\n    const matchValue$$9 = [bs$$2, cs$$2];\n    var $target$$151, x$$45, xs$$82, y$$12, ys$$19;\n\n    if (matchValue$$9[0].tail != null) {\n      if (matchValue$$9[1].tail != null) {\n        $target$$151 = 1;\n        x$$45 = matchValue$$9[0].head;\n        xs$$82 = matchValue$$9[0].tail;\n        y$$12 = matchValue$$9[1].head;\n        ys$$19 = matchValue$$9[1].tail;\n      } else {\n        $target$$151 = 2;\n      }\n    } else if (matchValue$$9[1].tail == null) {\n      $target$$151 = 0;\n    } else {\n      $target$$151 = 2;\n    }\n\n    switch ($target$$151) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$45, y$$12)) {\n            return true;\n          } else {\n            $arg$$148 = f$$52;\n            $arg$$149 = xs$$82;\n            $arg$$150 = ys$$19;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [L(tupledArg$$2[0], tupledArg$$3[0]), L(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [L(), L()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [L(tupledArg$$4[0], tupledArg$$5[0]), L(tupledArg$$4[1], tupledArg$$5[1]), L(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [L(), L(), L()]);\n}\nexport function zip(xs$$85, ys$$20) {\n  return map2(function (x$$48, y$$15) {\n    return [x$$48, y$$15];\n  }, xs$$85, ys$$20);\n}\nexport function zip3(xs$$86, ys$$21, zs$$5) {\n  return map3(function (x$$49, y$$16, z$$5) {\n    return [x$$49, y$$16, z$$5];\n  }, xs$$86, ys$$21, zs$$5);\n}\nexport function sort(xs$$87, comparer$$2) {\n  var xs$$88;\n  return ofArray((xs$$88 = ofList(xs$$87, Array), (xs$$88.sort(function comparer$$3(x$$50, y$$17) {\n    return comparer$$2.Compare(x$$50, y$$17);\n  }), xs$$88)));\n}\nexport function sortBy(projection, xs$$90, comparer$$4) {\n  var xs$$91;\n  return ofArray((xs$$91 = ofList(xs$$90, Array), (xs$$91.sort(function comparer$$5(x$$51, y$$18) {\n    return comparer$$4.Compare(projection(x$$51), projection(y$$18));\n  }), xs$$91)));\n}\nexport function sortDescending(xs$$93, comparer$$6) {\n  var xs$$94;\n  return ofArray((xs$$94 = ofList(xs$$93, Array), (xs$$94.sort(function comparer$$7(x$$52, y$$19) {\n    return comparer$$6.Compare(x$$52, y$$19) * -1;\n  }), xs$$94)));\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$8) {\n  var xs$$97;\n  return ofArray((xs$$97 = ofList(xs$$96, Array), (xs$$97.sort(function comparer$$9(x$$53, y$$20) {\n    return comparer$$8.Compare(projection$$1(x$$53), projection$$1(y$$20)) * -1;\n  }), xs$$97)));\n}\nexport function sortWith(comparer$$10, xs$$99) {\n  var xs$$100;\n  return ofArray((xs$$100 = ofList(xs$$99, Array), (xs$$100.sort(comparer$$10), xs$$100)));\n}\nexport function sum(xs$$102) {\n  return fold(function (x$$54, y$$21) {\n    return x$$54 + y$$21;\n  }, 0, xs$$102);\n}\nexport function sumBy(f$$53, xs$$103) {\n  return fold(function (acc$$22, x$$55) {\n    return acc$$22 + f$$53(x$$55);\n  }, 0, xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(projection$$2(y$$22), projection$$2(x$$56)) > 0 ? y$$22 : x$$56;\n  }, xs$$104);\n}\nexport function max(li, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(y$$23, x$$57) > 0 ? y$$23 : x$$57;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(projection$$3(y$$24), projection$$3(x$$58)) > 0 ? x$$58 : y$$24;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$15) {\n  return reduce(function (x$$59, y$$25) {\n    return comparer$$15.Compare(y$$25, x$$59) > 0 ? x$$59 : y$$25;\n  }, xs$$106);\n}\nexport function average(zs$$6) {\n  const total = sum(zs$$6);\n  return total / length(zs$$6);\n}\nexport function averageBy(g, zs$$7) {\n  const total$$1 = sumBy(g, zs$$7);\n  return total$$1 / length(zs$$7);\n}\nexport function permute(f$$54, xs$$107) {\n  return ofArray(permute$$1(f$$54, ofList(xs$$107, Array)));\n}\nexport function skip(i$$15, xs$$109) {\n  const skipInner = function skipInner(i$$16, xs$$110) {\n    skipInner: while (true) {\n      const matchValue$$10 = [i$$16, xs$$110];\n\n      if (matchValue$$10[0] === 0) {\n        return xs$$110;\n      } else if (matchValue$$10[1].tail != null) {\n        const xs$$111 = matchValue$$10[1].tail;\n        i$$16 = i$$16 - 1;\n        xs$$110 = xs$$111;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n    }\n  };\n\n  const matchValue$$11 = [i$$15, xs$$109];\n\n  if (matchValue$$11[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$172, i$$19, xs$$113;\n\n    if (matchValue$$11[0] === 0) {\n      $target$$172 = 0;\n    } else if (matchValue$$11[0] === 1) {\n      if (matchValue$$11[1].tail != null) {\n        $target$$172 = 1;\n      } else {\n        $target$$172 = 2;\n        i$$19 = matchValue$$11[0];\n        xs$$113 = matchValue$$11[1];\n      }\n    } else {\n      $target$$172 = 2;\n      i$$19 = matchValue$$11[0];\n      xs$$113 = matchValue$$11[1];\n    }\n\n    switch ($target$$172) {\n      case 0:\n        {\n          return xs$$109;\n        }\n\n      case 1:\n        {\n          const xs$$112 = matchValue$$11[1].tail;\n          return xs$$112;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$19, xs$$113);\n        }\n    }\n  }\n}\nexport function skipWhile($arg$$173, $arg$$174) {\n  var t$$3, h$$3;\n\n  skipWhile: while (true) {\n    const predicate = $arg$$173,\n          xs$$114 = $arg$$174;\n    var $target$$175, h$$4, t$$4;\n\n    if (xs$$114.tail != null) {\n      if (t$$3 = xs$$114.tail, (h$$3 = xs$$114.head, predicate(h$$3))) {\n        $target$$175 = 0;\n        h$$4 = xs$$114.head;\n        t$$4 = xs$$114.tail;\n      } else {\n        $target$$175 = 1;\n      }\n    } else {\n      $target$$175 = 1;\n    }\n\n    switch ($target$$175) {\n      case 0:\n        {\n          $arg$$173 = predicate;\n          $arg$$174 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$114;\n        }\n    }\n  }\n}\nexport function takeSplitAux(error, i$$20, acc$$23, xs$$115) {\n  takeSplitAux: while (true) {\n    const matchValue$$12 = [i$$20, xs$$115];\n\n    if (matchValue$$12[0] === 0) {\n      return [reverse(acc$$23), xs$$115];\n    } else if (matchValue$$12[1].tail != null) {\n      const xs$$116 = matchValue$$12[1].tail;\n      const x$$60 = matchValue$$12[1].head;\n      error = error;\n      i$$20 = i$$20 - 1;\n      acc$$23 = L(x$$60, acc$$23);\n      xs$$115 = xs$$116;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$23), xs$$115];\n      }\n    }\n  }\n}\nexport function take(i$$21, xs$$117) {\n  const matchValue$$13 = [i$$21, xs$$117];\n\n  if (matchValue$$13[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$176, i$$24, xs$$118;\n\n    if (matchValue$$13[0] === 0) {\n      $target$$176 = 0;\n    } else if (matchValue$$13[0] === 1) {\n      if (matchValue$$13[1].tail != null) {\n        $target$$176 = 1;\n      } else {\n        $target$$176 = 2;\n        i$$24 = matchValue$$13[0];\n        xs$$118 = matchValue$$13[1];\n      }\n    } else {\n      $target$$176 = 2;\n      i$$24 = matchValue$$13[0];\n      xs$$118 = matchValue$$13[1];\n    }\n\n    switch ($target$$176) {\n      case 0:\n        {\n          return L();\n        }\n\n      case 1:\n        {\n          const x$$61 = matchValue$$13[1].head;\n          return L(x$$61, L());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$24, L(), xs$$118)[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$119) {\n  if (xs$$119.tail != null) {\n    if (xs$$119.tail.tail == null) {\n      if (predicate$$1(xs$$119.head)) {\n        return xs$$119;\n      } else {\n        return xs$$119.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$119.head)) {\n        return L();\n      } else {\n        return L(xs$$119.head, takeWhile(predicate$$1, xs$$119.tail));\n      }\n    }\n  } else {\n    return xs$$119;\n  }\n}\nexport function truncate(i$$25, xs$$121) {\n  const matchValue$$14 = [i$$25, xs$$121];\n\n  if (matchValue$$14[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$179, i$$28, xs$$122;\n\n    if (matchValue$$14[0] === 0) {\n      $target$$179 = 0;\n    } else if (matchValue$$14[0] === 1) {\n      if (matchValue$$14[1].tail != null) {\n        $target$$179 = 1;\n      } else {\n        $target$$179 = 2;\n        i$$28 = matchValue$$14[0];\n        xs$$122 = matchValue$$14[1];\n      }\n    } else {\n      $target$$179 = 2;\n      i$$28 = matchValue$$14[0];\n      xs$$122 = matchValue$$14[1];\n    }\n\n    switch ($target$$179) {\n      case 0:\n        {\n          return L();\n        }\n\n      case 1:\n        {\n          const x$$64 = matchValue$$14[1].head;\n          return L(x$$64, L());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(false, i$$28, L(), xs$$122)[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$29, xs$$123) {\n  const matchValue$$15 = [i$$29, xs$$123];\n\n  if (matchValue$$15[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$180, i$$32, xs$$125;\n\n    if (matchValue$$15[0] === 0) {\n      $target$$180 = 0;\n    } else if (matchValue$$15[0] === 1) {\n      if (matchValue$$15[1].tail != null) {\n        $target$$180 = 1;\n      } else {\n        $target$$180 = 2;\n        i$$32 = matchValue$$15[0];\n        xs$$125 = matchValue$$15[1];\n      }\n    } else {\n      $target$$180 = 2;\n      i$$32 = matchValue$$15[0];\n      xs$$125 = matchValue$$15[1];\n    }\n\n    switch ($target$$180) {\n      case 0:\n        {\n          return [L(), xs$$123];\n        }\n\n      case 1:\n        {\n          const xs$$124 = matchValue$$15[1].tail;\n          const x$$65 = matchValue$$15[1].head;\n          return [L(x$$65, L()), xs$$124];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$32, L(), xs$$125);\n        }\n    }\n  }\n}\nexport function slice(lower, upper, xs$$126) {\n  const lower$$1 = defaultArg(lower, -1) | 0;\n  const upper$$1 = defaultArg(upper, -1) | 0;\n  return reverse(foldIndexed(function f$$55(i$$33, acc$$24, x$$66) {\n    if ((lower$$1 === -1 ? true : lower$$1 <= i$$33) ? upper$$1 === -1 ? true : i$$33 <= upper$$1 : false) {\n      return L(x$$66, acc$$24);\n    } else {\n      return acc$$24;\n    }\n  }, L(), xs$$126));\n}\nexport function distinctBy(projection$$4, xs$$129, eq$$2) {\n  const hashSet = createMutable([], comparerFromEqualityComparer(eq$$2));\n  return filter(function f$$56($arg$$1) {\n    return addToSet(projection$$4($arg$$1), hashSet);\n  }, xs$$129);\n}\nexport function distinct(xs$$131, eq$$3) {\n  return distinctBy(function (x$$67) {\n    return x$$67;\n  }, xs$$131, eq$$3);\n}\nexport function groupBy(projection$$5, xs$$132, eq$$4) {\n  const dict = createMutable$$1([], comparerFromEqualityComparer(eq$$4));\n  iterate$$1(function (v$$2) {\n    const key = projection$$5(v$$2);\n\n    if (dict.has(key)) {\n      dict.set(key, L(v$$2, dict.get(key)));\n    } else {\n      dict.set(key, L(v$$2, L()));\n    }\n  }, xs$$132);\n  return ofSeq(map$$1(function mapping(kv) {\n    return [kv[0], reverse(kv[1])];\n  }, dict));\n}\nexport function countBy(projection$$6, xs$$134, eq$$5) {\n  const dict$$1 = createMutable$$1([], comparerFromEqualityComparer(eq$$5));\n  iterate(function (v$$3) {\n    const key$$1 = projection$$6(v$$3);\n    const matchValue$$16 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$16[0]) {\n      matchValue$$16[1].contents = matchValue$$16[1].contents + 1;\n    } else {\n      dict$$1.set(key$$1, new FSharpRef(1));\n    }\n  }, xs$$134);\n  let result$$1 = L();\n  iterate$$1(function (group) {\n    result$$1 = L([group[0], group[1].contents], result$$1);\n  }, dict$$1);\n  return result$$1;\n}\nexport function where(predicate$$2, xs$$135) {\n  return filter(predicate$$2, xs$$135);\n}","module Wordset\r\nopen System\r\n\r\ntype WordSet(wordSet: seq<string>) = \r\n    let allWords = \r\n        wordSet |> List.ofSeq\r\n\r\n    let rec wordIsMatch (pattern:char list) (word:char list): bool =\r\n        match pattern, word with\r\n        | [], [] -> true\r\n        | [], _ -> false\r\n        | _, [] -> true\r\n        | ph::pt, wh::wt -> \r\n            let letterMatch = \r\n                match ph with\r\n                | '*' -> true\r\n                |  _ -> ph = wh \r\n            letterMatch && wordIsMatch pt wt\r\n\r\n    let findwords (pattern:seq<char>): seq<string> =\r\n        let patternCount = Seq.length pattern\r\n        let patternAsList = List.ofSeq pattern\r\n\r\n\r\n        allWords \r\n        |> Seq.filter (fun w -> w.Length <= patternCount)\r\n        |> Seq.map (fun w -> \r\n            let wordAsList = List.ofSeq (w.ToCharArray())\r\n            w, wordIsMatch patternAsList wordAsList\r\n        )\r\n        |> Seq.filter (fun (_, ok) -> ok)\r\n        |> Seq.map (fun (w, _) -> w)\r\n\r\n    member this.FindWords(pattern:seq<char>): seq<string> = findwords pattern\r\n","module BoardBuilder\r\n\r\nopen Board\r\nopen Wordset\r\nopen System\r\n\r\ntype BoardSpan = { \r\n    Position: BoardPosition\r\n    Direction: WordDirection\r\n    Length: int \r\n}\r\nlet createEmptySpan (start: BoardPosition) (direction: WordDirection) (length: int) : BoardSpan =\r\n    {\r\n      Position = start\r\n      Direction = direction\r\n      Length = length\r\n    }\r\n\r\nlet rnd = new Random()\r\n\r\nlet spanAsPattern (board: Board) (span:BoardSpan): seq<char>  = \r\n    walkBoard span.Position span.Direction span.Length board\r\n\r\nlet wordsForSpan (wordlist: WordSet) (span: BoardSpan) (board: Board) : seq<string> = \r\n    let patt = spanAsPattern board span\r\n    wordlist.FindWords patt\r\n\r\n\r\nlet createBoardWordForSpan (word: string) (span: BoardSpan) : BoardWord =\r\n    {\r\n        BoardWord.Position = span.Position \r\n        Direction = span.Direction\r\n        Word = word\r\n    }\r\n\r\n\r\nlet fillSpan (words: WordSet) (board: Board) (span: BoardSpan) : Board =\r\n        let candidateWords = wordsForSpan words span board |> List.ofSeq\r\n        match candidateWords with\r\n        | [] -> board\r\n        | _ -> \r\n            let wordList = candidateWords |> List.ofSeq\r\n            let selectedWord = wordList.[rnd.Next(0, wordList.Length)]\r\n            let boardWord = createBoardWordForSpan selectedWord span\r\n            addWordToBoard boardWord board\r\n\r\nlet generateBoard wordlist width height =\r\n    let ws = WordSet(wordlist)\r\n    let spans = \r\n        seq {\r\n            for r in 0..(height-1) do\r\n              for c in 0..(width-1) do\r\n                yield createEmptySpan { Row = r; Col = c } Right (width - c) \r\n                yield createEmptySpan { Row = r; Col = c } Left (c + 1)\r\n                yield createEmptySpan { Row = r; Col = c } Down (height - r) \r\n                yield createEmptySpan { Row = r; Col = c } Up (r + 1)\r\n                yield createEmptySpan { Row = r; Col = c } RightUp (min (width - c) (r + 1))\r\n                yield createEmptySpan { Row = r; Col = c } LeftUp (min (c + 1) (r + 1))\r\n                yield createEmptySpan { Row = r; Col = c } RightDown (min (width - c) (height - r))\r\n                yield createEmptySpan { Row = r; Col = c } LeftDown (min (c + 1) (height - r))\r\n        }\r\n    \r\n    \r\n    let unfilledSpans = spans |> List.ofSeq |> List.sortBy (fun _ -> rnd.Next()) \r\n    let startBoard = createBoard width height\r\n\r\n    unfilledSpans\r\n        |> Seq.fold (fillSpan ws) startBoard\r\n","module WordBoard\r\n\r\nopen System\r\nopen CommonWords\r\nopen Board\r\nopen BoardBuilder\r\n\r\nlet commonWordList = \r\n    commonWords.Split('\\n') \r\n        |> Seq.map (fun w -> w.Trim()) \r\n        |> Seq.filter (String.IsNullOrWhiteSpace >> not)\r\n        |> Array.ofSeq\r\n\r\ntype JsSafeBoard = {\r\n    Rows: int\r\n    Cols: int\r\n    Letters: LetterGrid\r\n    Words: BoardWord[]\r\n}\r\n\r\n// Generate a board\r\nlet genBoard (wordlist: string[]) (width:int) (height:int): JsSafeBoard =\r\n    let board = generateBoard wordlist width height\r\n    {\r\n        Rows = board.Rows\r\n        Cols = board.Cols\r\n        Letters = board.Letters\r\n        Words = board.Words |> Array.ofList\r\n    }\r\n\r\nlet dumpBoard (board:JsSafeBoard) =\r\n    printfn \"%d words\" board.Words.Length\r\n    board.Words |> Seq.iter (fun (w: BoardWord) -> printfn \"%A [(r:%d,c:%d) %A]\" w w.Position.Row w.Position.Col w.Direction)\r\n    board.Letters \r\n    |> Array.iter (fun row -> \r\n        row |> Array.iter ( fun l -> printf \" %c \" l)\r\n        printfn \"\\n\"\r\n    )\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as WordBoard from './wordboard'\r\n\r\nexport type Board = WordBoard.Board\r\nexport type BoardPosition = WordBoard.BoardPosition\r\nexport type WordDirection = WordBoard.WordDirection\r\nexport type BoardWord = WordBoard.BoardWord\r\n\r\nexport function stripVowels(s:string): string {\r\n    return s.replace(/[aeiou]/g, '');\r\n}\r\n\r\nfunction mapConsonantsToWords(words: string[]): Map<string, string[]> {\r\n    const map = new Map();\r\n    words.forEach((item) => {\r\n        const key = stripVowels(item);\r\n        const collection = map.get(key);\r\n        if (!collection) {\r\n            map.set(key, [item]);\r\n        } else {\r\n            collection.push(item);\r\n        }\r\n    });\r\n    return map;\r\n}\r\n\r\nexport const fullWordset = new Set(WordBoard.commonWordList);\r\n\r\nexport const consonantsToWords = mapConsonantsToWords(WordBoard.commonWordList);\r\n\r\nexport function generateBoard(width: number, height: number, minConsonantLength: number): Board {\r\n    return WordBoard.genBoard([...consonantsToWords.keys()].filter(x=>x.length >= minConsonantLength), width, height);\r\n}\r\n\r\nexport function lookupFullWords(voweless: string): string[] {\r\n    return consonantsToWords.get(voweless) || []\r\n}","function n(n,t){for(var r in t)n[r]=t[r];return n}export default function(t){var r=[];function u(n){for(var t=[],u=0;u<r.length;u++)r[u]===n?n=null:t.push(r[u]);r=t}function e(u,e,f){t=e?u:n(n({},t),u);for(var i=r,o=0;o<i.length;o++)i[o](t,f)}return t=t||{},{action:function(n){function r(t){e(t,!1,n)}return function(){for(var u=arguments,e=[t],f=0;f<arguments.length;f++)e.push(u[f]);var i=n.apply(this,e);if(null!=i)return i.then?i.then(r):r(i)}},setState:e,subscribe:function(n){return r.push(n),function(){u(n)}},unsubscribe:u,getState:function(){return t}}};\n//# sourceMappingURL=unistore.es.js.map\n","import { h, Component, RenderableProps } from 'preact';\r\nimport { Board }  from '../lib/vowelboard'\r\nimport { BoardPosition } from '../lib/wordboard';\r\n\r\ninterface LetterTileProps { \r\n    x: number, \r\n    y: number, \r\n    letter: string, \r\n    selected: boolean,\r\n}\r\n\r\nexport function LetterTile( { letter, selected, x, y }: RenderableProps<LetterTileProps>) {\r\n    var inner = selected ? <b> { letter } </b> :  letter \r\n\r\n    return (   \r\n        <span class={\"letter-tile\" + (selected ? \" selected\" : \"\") } >\r\n        { inner }\r\n        </span> \r\n    )\r\n}\r\n\r\ninterface LetterGridProps {\r\n    selectedLetters: BoardPosition[]\r\n    board: Board\r\n    onTrySelectLetter?: (row:number, col: number, letter: string) => void\r\n}\r\n\r\nexport class LetterGrid extends Component<LetterGridProps,{}>  {\r\n\r\n    letters: Map<number, Component<LetterTileProps>>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.letters = new Map();\r\n        this.handleMouseDrag = this.handleMouseDrag.bind(this);\r\n        this.handleTouchDrag = this.handleTouchDrag.bind(this);\r\n    }\r\n\r\n    handleMouseDrag(e: MouseEvent) {\r\n        if ((e.buttons & 1) > 0) {\r\n            this.handlePointerDrag(e.pageX, e.pageY)\r\n        }\r\n        e.preventDefault();\r\n        return false;\r\n    }\r\n\r\n\r\n    handleTouchDrag(e: TouchEvent) {\r\n        this.handlePointerDrag(e.touches[0].pageX, e.touches[0].pageY)\r\n    }\r\n\r\n    handlePointerDrag(pageX: number, pageY: number) {\r\n        if (!this.props.onTrySelectLetter) return;\r\n        const eventInBounds = (r:DOMRect | ClientRect ):boolean =>pageX >= r.left && pageX < (r.left + r.width) && pageY >= r.top && pageY < (r.top + r.height);\r\n        var letterComponent  = [...this.letters.values()].find(l=>l.base && eventInBounds(l.base.getBoundingClientRect()))\r\n        if (!letterComponent) return;\r\n        this.props.onTrySelectLetter(letterComponent.props.y, letterComponent.props.x, letterComponent.props.letter)\r\n    }\r\n\r\n    render({ board, onTrySelectLetter, selectedLetters }:LetterGridProps): JSX.Element {\r\n        let letters = board.Letters.map( \r\n            (row, rownum) => row.map( \r\n                (letter, colnum) => (\r\n                    <LetterTile ref={x =>this.letters.set(rownum * 1000 + colnum, x)} x={colnum} y={rownum} letter={letter}  selected={selectedLetters.find(l => l.Row == rownum && l.Col == colnum) != null }></LetterTile> \r\n                ) \r\n            )\r\n        )\r\n\r\n        return (\r\n        <div class={\"letter-grid cols-\"+board.Cols} \r\n            onTouchStart={this.handleTouchDrag} \r\n            onTouchMove={this.handleTouchDrag} \r\n            onMouseDown={this.handleMouseDrag} \r\n            onMouseMove={this.handleMouseDrag}>\r\n            { letters }  \r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import  { h } from 'preact';\r\n\r\ninterface ClueProps { word: string, selectedLetters: string[] }\r\nexport function Clue( { word, selectedLetters }: ClueProps)  {\r\n    var wordTemplate = word.replace(/[^aeiou]/g,' ')\r\n    \r\n    //sub in currently selected letters\r\n    var displayWord = wordTemplate;\r\n    selectedLetters.forEach(letter => {\r\n        displayWord = displayWord.replace(/ /,letter)\r\n    });\r\n\r\n    \r\n    return (\r\n        \r\n        <div class=\"word-hint\">\r\n        {\r\n            displayWord.split('').map(( letter,idx) => {\r\n                let spanClass = \"letter\" + (wordTemplate[idx] == \" \" ? \" space\": \"\");\r\n                var blankSpace = (<span>&nbsp;</span>)\r\n                return letter == \" \" \r\n                    ? <span class={spanClass}>&#5867;</span>\r\n                    : <span class={spanClass}>{letter}</span>\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import  { h } from 'preact';\r\n\r\n//slash was &#xFF0F;\r\ninterface ProgressProps { done: number; total: number }\r\nexport function Progress( { done, total }: ProgressProps)  {\r\n    return (\r\n        <div class=\"progress\">\r\n            <span class=\"progress-done\">{done}</span>\r\n            <span class=\"progress-slash\">&#xFF0F;</span>\r\n            <span class=\"progress-total\">{total}</span>\r\n        </div>\r\n    )\r\n}\r\n","import {h, render} from 'preact';\r\nimport { generateBoard,  Board, BoardWord, lookupFullWords, BoardPosition, fullWordset }  from './lib/vowelboard'\r\nimport { Provider } from 'unistore/preact'\r\n\r\nimport createStore, { ActionMap } from 'unistore'\r\nimport { ActionConstructor, connectSafe } from './lib/storehelper';\r\nimport { LetterGrid } from './components/lettergrid';\r\nimport { Clue } from './components/clue';\r\nimport { WordDirection } from './lib/wordboard';\r\nimport { Progress } from './components/progress';\r\n\r\ntype GameState = {\r\n    board: Board,\r\n    patternList: string[],\r\n    currentPatternIdx: number,\r\n    selectedLetters: BoardPosition[]\r\n    foundWords: string[],\r\n    levelComplete: boolean\r\n}\r\n\r\nfunction randomElement<T>(a: Array<T>):T {\r\n    return a[Math.trunc(Math.random() * a.length)]\r\n}\r\n\r\nfunction createGameState(): GameState {\r\n    var board = generateBoard(3,3,3);\r\n    \r\n    var consonantWords = new Set(board.Words.map(w => w.Word));\r\n    var wordlist = [...consonantWords.values()].map(c => randomElement(lookupFullWords(c)))\r\n    var patternlist = wordlist.map(w => w.replace(/[^aeiou]/g,' '));\r\n    \r\n    //shuffle a little\r\n    patternlist.sort(function(a, b){return 0.5 - Math.random()});\r\n\r\n    return { \r\n        board: board,\r\n        patternList: patternlist,\r\n        selectedLetters: [],\r\n        currentPatternIdx: 0,\r\n        foundWords: [],\r\n        levelComplete: false\r\n    }\r\n}\r\n\r\nlet gameState = createStore<GameState>(\r\n   createGameState()\r\n)\r\n\r\nlet actions: ActionConstructor<GameState> = store => ({\r\n    foundWord: ({ currentPatternIdx, foundWords, patternList }, word) => {\r\n        var newFoundWords = [...foundWords, word];\r\n        var newPatternIdx = currentPatternIdx + 1;\r\n        if (newPatternIdx < patternList.length) {\r\n            return { \r\n                foundWords: newFoundWords,\r\n                currentPatternIdx: newPatternIdx,\r\n                selectedLetters: [],\r\n            }\r\n        } else {\r\n            return { \r\n                foundWords: foundWords,\r\n                levelComplete: true\r\n            }\r\n        }\r\n    },\r\n\r\n    newLevel: () => createGameState(),\r\n\r\n    selectLetter: ({ selectedLetters }, position:BoardPosition) => {\r\n        return {\r\n            selectedLetters: [ ...selectedLetters, position ]\r\n        }\r\n    },\r\n\r\n    replaceLastSelectedLetter: ({ selectedLetters }, position:BoardPosition) => {\r\n        let l = selectedLetters.slice(0, selectedLetters.length-1)\r\n        return {\r\n            selectedLetters: [ ...l, position ]\r\n        }\r\n    },\r\n\r\n    wrongWord: ({ selectedLetters })=> {\r\n        return {\r\n            selectedLetters: []\r\n        }\r\n    }\r\n    \r\n})\r\n\r\n\r\n\r\nfunction directionOfSelection(existingSelections: BoardPosition[]):WordDirection {\r\n    //two points form a line\r\n    if (existingSelections.length < 2) {\r\n        return null;\r\n    }\r\n    var first = existingSelections[0];\r\n    var second = existingSelections[1];\r\n    if (second.Row == first.Row && second.Col > first.Col) return \"Right\"\r\n    if (second.Row == first.Row && second.Col < first.Col) return \"Left\"\r\n    if (second.Row > first.Row && second.Col == first.Col) return \"Down\"\r\n    if (second.Row < first.Row && second.Col == first.Col) return \"Up\"\r\n\r\n    \r\n    \r\n    let deltaRow = second.Row - first.Row;\r\n    let deltaCol = second.Col - first.Col;\r\n    if (deltaRow == deltaCol  && deltaRow > 0) return \"RightDown\"\r\n    if (deltaRow == deltaCol  && deltaRow < 0) return \"LeftUp\"\r\n\r\n    if (deltaRow == (-1 * deltaCol) && deltaRow > 0) return \"LeftDown\"\r\n    if (deltaRow == (-1 * deltaCol) && deltaRow < 0) return \"RightUp\"\r\n    \r\n\r\n\r\n\r\n\r\n    return null;\r\n}\r\n\r\nfunction posEqual(a: BoardPosition, b: BoardPosition): boolean {\r\n    return a.Col == b.Col && a.Row == b.Row;\r\n}\r\n\r\nfunction moveInDirection(pos: BoardPosition, dir: WordDirection) {\r\n    if (dir == \"Right\") return { Row: pos.Row, Col: pos.Col + 1 }\r\n    if (dir == \"Left\") return { Row: pos.Row, Col: pos.Col - 1 }\r\n    if (dir == \"Up\") return { Row: pos.Row - 1, Col: pos.Col }\r\n    if (dir == \"Down\") return { Row: pos.Row + 1, Col: pos.Col }\r\n    if (dir == \"RightUp\") return { Row: pos.Row - 1, Col: pos.Col + 1 }\r\n    if (dir == \"LeftUp\") return { Row: pos.Row - 1, Col: pos.Col - 1 }\r\n    if (dir == \"RightDown\") return { Row: pos.Row + 1, Col: pos.Col + 1 }\r\n    if (dir == \"LeftDown\") return { Row: pos.Row + 1, Col: pos.Col - 1 }\r\n    return pos;\r\n}\r\n\r\nfunction canSelectLetter(existingSelections: BoardPosition[], newSelection:BoardPosition): boolean {\r\n    var dir = directionOfSelection(existingSelections);\r\n    if (existingSelections.length > 1 && !dir) {\r\n        return false;\r\n    }\r\n    if (existingSelections.length == 0) {\r\n        return true;\r\n    }\r\n    if (existingSelections.length == 1) {\r\n        dir = directionOfSelection([...existingSelections, newSelection]);\r\n        if (!dir) return false;\r\n    }\r\n\r\n    var lastSelection = existingSelections[existingSelections.length -1];\r\n    if (lastSelection == newSelection) {\r\n        return false;\r\n    }\r\n    var expectedSelection = moveInDirection(lastSelection, dir);\r\n    var equal = posEqual(expectedSelection, newSelection);\r\n\r\n    return equal\r\n}\r\n\r\n\r\nfunction applySelectionToPattern(selection: string, pattern: string): string {\r\n    var fullWord = pattern;\r\n    selection.split(\"\").forEach(letter => {\r\n        fullWord = fullWord.replace(/ /,letter)\r\n    });\r\n    return fullWord;\r\n}\r\n\r\nconst App = connectSafe(['board','patternList', 'currentPatternIdx',\"selectedLetters\",\"foundWords\",\"levelComplete\"], actions)(\r\n    ({ board, patternList, currentPatternIdx, selectLetter, foundWords, selectedLetters, foundWord, levelComplete, wrongWord, newLevel, replaceLastSelectedLetter  }: GameState & { selectLetter: any, foundWord: any, wrongWord: any, newLevel: any, replaceLastSelectedLetter: any }) => {\r\n        \r\n        \r\n        const trySelectLetter = (row: number , col: number) => {\r\n            var pos = { Row: row, Col: col };\r\n            if (canSelectLetter(selectedLetters, pos)) {\r\n                selectLetter(pos)                \r\n            } else {\r\n                if (selectedLetters.length == 2) {\r\n                    //try change our last letter to change direction\r\n                    if (canSelectLetter(selectedLetters.slice(0,-1), pos)) {\r\n                        replaceLastSelectedLetter(pos)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const positionsToWord = (positions: BoardPosition[]):string => positions.map( p => board.Letters[p.Row][p.Col]).join(\"\")\r\n        const handleSelectionFinish = () => {\r\n            var selectedConsonants = selectedLetters.map( p => board.Letters[p.Row][p.Col]).join(\"\");\r\n            var selectedWord = applySelectionToPattern(selectedConsonants, patternList[currentPatternIdx])\r\n            fullWordset.has(selectedWord)\r\n            \r\n            \r\n            if (fullWordset.has(selectedWord)) {\r\n                setTimeout(() => foundWord(selectedWord), 250);\r\n                //foundWord(selectedWord)\r\n            } else {\r\n\r\n                setTimeout(() => wrongWord(), selectedLetters.length < 2 ? 0 : 100);\r\n            }\r\n        }\r\n\r\n        var grid = <LetterGrid board={board} onTrySelectLetter={trySelectLetter} selectedLetters={selectedLetters}></LetterGrid>\r\n\r\n        if (levelComplete) {\r\n            grid = (\r\n                <div class=\"grid-complete\">\r\n                    <h1>Success!</h1>\r\n                    <a onClick={newLevel}>New Game &#8250;</a>\r\n                </div>\r\n            )\r\n        }\r\n      \r\n        return (\r\n        <div class=\"game-container\" \r\n            onPointerCancel={handleSelectionFinish} \r\n            onPointerUp={handleSelectionFinish} \r\n            onTouchEnd={handleSelectionFinish} \r\n            onTouchCancel={handleSelectionFinish} \r\n            onMouseLeave={handleSelectionFinish}>\r\n            <div class=\"progress-section\">\r\n                <Progress done={foundWords.length+1} total={patternList.length}></Progress>\r\n            </div>\r\n            <div class=\"clue-section\">\r\n                <Clue word={patternList[currentPatternIdx]} selectedLetters={positionsToWord(selectedLetters).split(\"\")}></Clue>\r\n            </div>\r\n            <div class=\"grid-section\">\r\n                {grid}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n  )\r\n\r\nrender(\r\n    <Provider store={gameState}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n","import { Store, ActionCreator, StateMapper } from 'unistore'\r\nimport { connect } from 'unistore/preact'\r\n\r\ntype ActionFn<K> = (state: K, ...args: any[]) => Partial<K>;\r\n\r\ninterface ActionMap<K> {\r\n\t[actionName: string]: ActionFn<K>;\r\n}\r\n\r\nexport type ActionConstructor<K> = (store: Store<K>) => ActionMap<K>\r\n\r\nexport function connectSafe<T, K, I>(\r\n    mapStateToProps: string | Array<keyof K> | StateMapper<T, K, I>,\r\n    actions?: ActionCreator<K> | object\r\n): (\r\n    Child: ((props?: T & I) => JSX.Element) | preact.ComponentConstructor<T & I> | preact.AnyComponent<T & I>\r\n) => preact.ComponentConstructor<T> {\r\n    return connect(mapStateToProps as string | Array<string> | StateMapper<T, K, I> , actions);\r\n}"],"sourceRoot":""}